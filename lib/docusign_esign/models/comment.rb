=begin
#DocuSign REST API

#The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

OpenAPI spec version: v2.1
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module DocuSign_eSign

  class Comment
    # The envelope ID of the envelope status that failed to post.
    attr_accessor :envelope_id

    # 
    attr_accessor :hmac

    # 
    attr_accessor :id

    # 
    attr_accessor :mentions

    # 
    attr_accessor :read

    # 
    attr_accessor :sent_by_email

    # 
    attr_accessor :sent_by_full_name

    # 
    attr_accessor :sent_by_image_id

    # 
    attr_accessor :sent_by_initials

    # 
    attr_accessor :sent_by_recipient_id

    # 
    attr_accessor :sent_by_user_id

    # When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
    attr_accessor :signing_group_id

    # The display name for the signing group.   Maximum Length: 100 characters. 
    attr_accessor :signing_group_name

    # 
    attr_accessor :subject

    # The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call].     
    attr_accessor :tab_id

    # 
    attr_accessor :text

    # 
    attr_accessor :thread_id

    # 
    attr_accessor :thread_originator_id

    # 
    attr_accessor :timestamp

    # 
    attr_accessor :time_stamp_formatted

    # 
    attr_accessor :visible_to


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'envelope_id' => :'envelopeId',
        :'hmac' => :'hmac',
        :'id' => :'id',
        :'mentions' => :'mentions',
        :'read' => :'read',
        :'sent_by_email' => :'sentByEmail',
        :'sent_by_full_name' => :'sentByFullName',
        :'sent_by_image_id' => :'sentByImageId',
        :'sent_by_initials' => :'sentByInitials',
        :'sent_by_recipient_id' => :'sentByRecipientId',
        :'sent_by_user_id' => :'sentByUserId',
        :'signing_group_id' => :'signingGroupId',
        :'signing_group_name' => :'signingGroupName',
        :'subject' => :'subject',
        :'tab_id' => :'tabId',
        :'text' => :'text',
        :'thread_id' => :'threadId',
        :'thread_originator_id' => :'threadOriginatorId',
        :'timestamp' => :'timestamp',
        :'time_stamp_formatted' => :'timeStampFormatted',
        :'visible_to' => :'visibleTo'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'envelope_id' => :'String',
        :'hmac' => :'String',
        :'id' => :'String',
        :'mentions' => :'Array<String>',
        :'read' => :'BOOLEAN',
        :'sent_by_email' => :'String',
        :'sent_by_full_name' => :'String',
        :'sent_by_image_id' => :'String',
        :'sent_by_initials' => :'String',
        :'sent_by_recipient_id' => :'String',
        :'sent_by_user_id' => :'String',
        :'signing_group_id' => :'String',
        :'signing_group_name' => :'String',
        :'subject' => :'String',
        :'tab_id' => :'String',
        :'text' => :'String',
        :'thread_id' => :'String',
        :'thread_originator_id' => :'String',
        :'timestamp' => :'String',
        :'time_stamp_formatted' => :'String',
        :'visible_to' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'envelopeId')
        self.envelope_id = attributes[:'envelopeId']
      end

      if attributes.has_key?(:'hmac')
        self.hmac = attributes[:'hmac']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'mentions')
        if (value = attributes[:'mentions']).is_a?(Array)
          self.mentions = value
        end
      end

      if attributes.has_key?(:'read')
        self.read = attributes[:'read']
      end

      if attributes.has_key?(:'sentByEmail')
        self.sent_by_email = attributes[:'sentByEmail']
      end

      if attributes.has_key?(:'sentByFullName')
        self.sent_by_full_name = attributes[:'sentByFullName']
      end

      if attributes.has_key?(:'sentByImageId')
        self.sent_by_image_id = attributes[:'sentByImageId']
      end

      if attributes.has_key?(:'sentByInitials')
        self.sent_by_initials = attributes[:'sentByInitials']
      end

      if attributes.has_key?(:'sentByRecipientId')
        self.sent_by_recipient_id = attributes[:'sentByRecipientId']
      end

      if attributes.has_key?(:'sentByUserId')
        self.sent_by_user_id = attributes[:'sentByUserId']
      end

      if attributes.has_key?(:'signingGroupId')
        self.signing_group_id = attributes[:'signingGroupId']
      end

      if attributes.has_key?(:'signingGroupName')
        self.signing_group_name = attributes[:'signingGroupName']
      end

      if attributes.has_key?(:'subject')
        self.subject = attributes[:'subject']
      end

      if attributes.has_key?(:'tabId')
        self.tab_id = attributes[:'tabId']
      end

      if attributes.has_key?(:'text')
        self.text = attributes[:'text']
      end

      if attributes.has_key?(:'threadId')
        self.thread_id = attributes[:'threadId']
      end

      if attributes.has_key?(:'threadOriginatorId')
        self.thread_originator_id = attributes[:'threadOriginatorId']
      end

      if attributes.has_key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.has_key?(:'timeStampFormatted')
        self.time_stamp_formatted = attributes[:'timeStampFormatted']
      end

      if attributes.has_key?(:'visibleTo')
        if (value = attributes[:'visibleTo']).is_a?(Array)
          self.visible_to = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          envelope_id == o.envelope_id &&
          hmac == o.hmac &&
          id == o.id &&
          mentions == o.mentions &&
          read == o.read &&
          sent_by_email == o.sent_by_email &&
          sent_by_full_name == o.sent_by_full_name &&
          sent_by_image_id == o.sent_by_image_id &&
          sent_by_initials == o.sent_by_initials &&
          sent_by_recipient_id == o.sent_by_recipient_id &&
          sent_by_user_id == o.sent_by_user_id &&
          signing_group_id == o.signing_group_id &&
          signing_group_name == o.signing_group_name &&
          subject == o.subject &&
          tab_id == o.tab_id &&
          text == o.text &&
          thread_id == o.thread_id &&
          thread_originator_id == o.thread_originator_id &&
          timestamp == o.timestamp &&
          time_stamp_formatted == o.time_stamp_formatted &&
          visible_to == o.visible_to
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [envelope_id, hmac, id, mentions, read, sent_by_email, sent_by_full_name, sent_by_image_id, sent_by_initials, sent_by_recipient_id, sent_by_user_id, signing_group_id, signing_group_name, subject, tab_id, text, thread_id, thread_originator_id, timestamp, time_stamp_formatted, visible_to].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_eSign.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
