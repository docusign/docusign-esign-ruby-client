=begin
#DocuSign REST API

#The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

OpenAPI spec version: v2.1
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module DocuSign_eSign

  class PaymentGatewayAccount
    # 
    attr_accessor :allow_custom_metadata

    attr_accessor :config

    # 
    attr_accessor :display_name

    # 
    attr_accessor :is_enabled

    # 
    attr_accessor :is_legacy

    # 
    attr_accessor :last_modified

    # 
    attr_accessor :payment_gateway

    # 
    attr_accessor :payment_gateway_account_id

    # 
    attr_accessor :payment_gateway_display_name

    attr_accessor :pay_pal_legacy_settings

    # 
    attr_accessor :supported_currencies

    # 
    attr_accessor :supported_payment_methods

    # 
    attr_accessor :supported_payment_methods_with_options


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'allow_custom_metadata' => :'allowCustomMetadata',
        :'config' => :'config',
        :'display_name' => :'displayName',
        :'is_enabled' => :'isEnabled',
        :'is_legacy' => :'isLegacy',
        :'last_modified' => :'lastModified',
        :'payment_gateway' => :'paymentGateway',
        :'payment_gateway_account_id' => :'paymentGatewayAccountId',
        :'payment_gateway_display_name' => :'paymentGatewayDisplayName',
        :'pay_pal_legacy_settings' => :'payPalLegacySettings',
        :'supported_currencies' => :'supportedCurrencies',
        :'supported_payment_methods' => :'supportedPaymentMethods',
        :'supported_payment_methods_with_options' => :'supportedPaymentMethodsWithOptions'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'allow_custom_metadata' => :'BOOLEAN',
        :'config' => :'PaymentGatewayAccountSetting',
        :'display_name' => :'String',
        :'is_enabled' => :'String',
        :'is_legacy' => :'String',
        :'last_modified' => :'String',
        :'payment_gateway' => :'String',
        :'payment_gateway_account_id' => :'String',
        :'payment_gateway_display_name' => :'String',
        :'pay_pal_legacy_settings' => :'PayPalLegacySettings',
        :'supported_currencies' => :'Array<String>',
        :'supported_payment_methods' => :'Array<String>',
        :'supported_payment_methods_with_options' => :'Array<PaymentMethodWithOptions>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'allowCustomMetadata')
        self.allow_custom_metadata = attributes[:'allowCustomMetadata']
      end

      if attributes.has_key?(:'config')
        self.config = attributes[:'config']
      end

      if attributes.has_key?(:'displayName')
        self.display_name = attributes[:'displayName']
      end

      if attributes.has_key?(:'isEnabled')
        self.is_enabled = attributes[:'isEnabled']
      end

      if attributes.has_key?(:'isLegacy')
        self.is_legacy = attributes[:'isLegacy']
      end

      if attributes.has_key?(:'lastModified')
        self.last_modified = attributes[:'lastModified']
      end

      if attributes.has_key?(:'paymentGateway')
        self.payment_gateway = attributes[:'paymentGateway']
      end

      if attributes.has_key?(:'paymentGatewayAccountId')
        self.payment_gateway_account_id = attributes[:'paymentGatewayAccountId']
      end

      if attributes.has_key?(:'paymentGatewayDisplayName')
        self.payment_gateway_display_name = attributes[:'paymentGatewayDisplayName']
      end

      if attributes.has_key?(:'payPalLegacySettings')
        self.pay_pal_legacy_settings = attributes[:'payPalLegacySettings']
      end

      if attributes.has_key?(:'supportedCurrencies')
        if (value = attributes[:'supportedCurrencies']).is_a?(Array)
          self.supported_currencies = value
        end
      end

      if attributes.has_key?(:'supportedPaymentMethods')
        if (value = attributes[:'supportedPaymentMethods']).is_a?(Array)
          self.supported_payment_methods = value
        end
      end

      if attributes.has_key?(:'supportedPaymentMethodsWithOptions')
        if (value = attributes[:'supportedPaymentMethodsWithOptions']).is_a?(Array)
          self.supported_payment_methods_with_options = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          allow_custom_metadata == o.allow_custom_metadata &&
          config == o.config &&
          display_name == o.display_name &&
          is_enabled == o.is_enabled &&
          is_legacy == o.is_legacy &&
          last_modified == o.last_modified &&
          payment_gateway == o.payment_gateway &&
          payment_gateway_account_id == o.payment_gateway_account_id &&
          payment_gateway_display_name == o.payment_gateway_display_name &&
          pay_pal_legacy_settings == o.pay_pal_legacy_settings &&
          supported_currencies == o.supported_currencies &&
          supported_payment_methods == o.supported_payment_methods &&
          supported_payment_methods_with_options == o.supported_payment_methods_with_options
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [allow_custom_metadata, config, display_name, is_enabled, is_legacy, last_modified, payment_gateway, payment_gateway_account_id, payment_gateway_display_name, pay_pal_legacy_settings, supported_currencies, supported_payment_methods, supported_payment_methods_with_options].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_eSign.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
