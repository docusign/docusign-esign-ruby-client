=begin
#DocuSign REST API

#The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

OpenAPI spec version: v2.1
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module DocuSign_eSign
  class UserSettingsInformation
    attr_accessor :account_management_granular

    # 
    attr_accessor :admin_only

    attr_accessor :admin_only_metadata

    # 
    attr_accessor :allow_auto_tagging

    # 
    attr_accessor :allow_envelope_transfer_to

    attr_accessor :allow_envelope_transfer_to_metadata

    # 
    attr_accessor :allow_eseal_recipients

    attr_accessor :allow_eseal_recipients_metadata

    # 
    attr_accessor :allow_power_forms_admin_to_access_all_power_form_envelope

    attr_accessor :allow_power_forms_admin_to_access_all_power_form_envelope_metadata

    # 
    attr_accessor :allow_recipient_language_selection

    attr_accessor :allow_recipient_language_selection_metadata

    # 
    attr_accessor :allow_send_on_behalf_of

    attr_accessor :allow_send_on_behalf_of_metadata

    # 
    attr_accessor :allow_supplemental_documents

    attr_accessor :allow_supplemental_documents_metadata

    # 
    attr_accessor :anchor_tag_versioned_placement_enabled

    # 
    attr_accessor :api_account_wide_access

    attr_accessor :api_account_wide_access_metadata

    # 
    attr_accessor :api_can_export_ac

    attr_accessor :api_can_export_ac_metadata

    # 
    attr_accessor :bulk_send

    attr_accessor :bulk_send_metadata

    # 
    attr_accessor :can_charge_account

    attr_accessor :can_charge_account_metadata

    # 
    attr_accessor :can_edit_shared_addressbook

    attr_accessor :can_edit_shared_addressbook_metadata

    # 
    attr_accessor :can_lock_envelopes

    attr_accessor :can_lock_envelopes_metadata

    # 
    attr_accessor :can_manage_account

    attr_accessor :can_manage_account_metadata

    # 
    attr_accessor :can_manage_distributor

    attr_accessor :can_manage_distributor_metadata

    # 
    attr_accessor :can_manage_templates

    attr_accessor :can_manage_templates_metadata

    # 
    attr_accessor :can_send_api_requests

    attr_accessor :can_send_api_requests_metadata

    # 
    attr_accessor :can_send_envelope

    attr_accessor :can_send_envelope_metadata

    # 
    attr_accessor :can_send_envelopes_via_sms

    attr_accessor :can_send_envelopes_via_sms_metadata

    # 
    attr_accessor :can_sign_envelope

    attr_accessor :can_sign_envelope_metadata

    # 
    attr_accessor :can_use_scratchpad

    attr_accessor :can_use_scratchpad_metadata

    # 
    attr_accessor :can_use_smart_contracts

    attr_accessor :can_use_smart_contracts_metadata

    # 
    attr_accessor :disable_document_upload

    attr_accessor :disable_document_upload_metadata

    # 
    attr_accessor :disable_other_actions

    attr_accessor :disable_other_actions_metadata

    # 
    attr_accessor :enable_ds_pro

    attr_accessor :enable_ds_pro_metadata

    # 
    attr_accessor :enable_sequential_signing_api

    attr_accessor :enable_sequential_signing_api_metadata

    # 
    attr_accessor :enable_sequential_signing_ui

    attr_accessor :enable_sequential_signing_ui_metadata

    # 
    attr_accessor :enable_signer_attachments

    attr_accessor :enable_signer_attachments_metadata

    # 
    attr_accessor :enable_sign_on_paper_override

    attr_accessor :enable_sign_on_paper_override_metadata

    # 
    attr_accessor :enable_transaction_point

    attr_accessor :enable_transaction_point_metadata

    # 
    attr_accessor :enable_vaulting

    attr_accessor :enable_vaulting_metadata

    # 
    attr_accessor :express_send_only

    # 
    attr_accessor :locale

    attr_accessor :locale_metadata

    attr_accessor :locale_policy

    # 
    attr_accessor :manage_clickwraps_mode

    attr_accessor :manage_clickwraps_mode_metadata

    # 
    attr_accessor :modified_by

    attr_accessor :modified_by_metadata

    # 
    attr_accessor :modified_date

    attr_accessor :modified_date_metadata

    # 
    attr_accessor :modified_page

    attr_accessor :modified_page_metadata

    # 
    attr_accessor :new_send_ui

    attr_accessor :new_send_ui_metadata

    # 
    attr_accessor :power_form_mode

    attr_accessor :power_form_mode_metadata

    # 
    attr_accessor :recipient_viewed_notification

    attr_accessor :recipient_viewed_notification_metadata

    # 
    attr_accessor :seal_identifiers

    # 
    attr_accessor :self_signed_recipient_email_document

    attr_accessor :self_signed_recipient_email_document_metadata

    attr_accessor :sender_email_notifications

    attr_accessor :signer_email_notifications

    # 
    attr_accessor :supplemental_document_include_in_download

    # 
    attr_accessor :supplemental_documents_must_accept

    attr_accessor :supplemental_documents_must_accept_metadata

    # 
    attr_accessor :supplemental_documents_must_read

    attr_accessor :supplemental_documents_must_read_metadata

    # 
    attr_accessor :supplemental_documents_must_view

    attr_accessor :supplemental_documents_must_view_metadata

    # 
    attr_accessor :template_active_creation

    attr_accessor :template_active_creation_metadata

    # 
    attr_accessor :template_apply_notify

    attr_accessor :template_apply_notify_metadata

    # 
    attr_accessor :template_auto_matching

    attr_accessor :template_auto_matching_metadata

    # 
    attr_accessor :template_matching_sensitivity

    attr_accessor :template_matching_sensitivity_metadata

    # 
    attr_accessor :template_page_level_matching

    attr_accessor :template_page_level_matching_metadata

    # 
    attr_accessor :timezone_dst

    attr_accessor :timezone_dst_metadata

    # 
    attr_accessor :timezone_mask

    attr_accessor :timezone_mask_metadata

    # 
    attr_accessor :timezone_offset

    attr_accessor :timezone_offset_metadata

    # 
    attr_accessor :timezone_sending_pref

    attr_accessor :timezone_sending_pref_metadata

    # 
    attr_accessor :timezone_signing_pref

    attr_accessor :timezone_signing_pref_metadata

    # 
    attr_accessor :transaction_point_site_name_url

    attr_accessor :transaction_point_site_name_url_metadata

    # 
    attr_accessor :transaction_point_user_name

    attr_accessor :transaction_point_user_name_metadata

    # 
    attr_accessor :vaulting_mode

    attr_accessor :vaulting_mode_metadata

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_management_granular' => :'accountManagementGranular',
        :'admin_only' => :'adminOnly',
        :'admin_only_metadata' => :'adminOnlyMetadata',
        :'allow_auto_tagging' => :'allowAutoTagging',
        :'allow_envelope_transfer_to' => :'allowEnvelopeTransferTo',
        :'allow_envelope_transfer_to_metadata' => :'allowEnvelopeTransferToMetadata',
        :'allow_eseal_recipients' => :'allowEsealRecipients',
        :'allow_eseal_recipients_metadata' => :'allowEsealRecipientsMetadata',
        :'allow_power_forms_admin_to_access_all_power_form_envelope' => :'allowPowerFormsAdminToAccessAllPowerFormEnvelope',
        :'allow_power_forms_admin_to_access_all_power_form_envelope_metadata' => :'allowPowerFormsAdminToAccessAllPowerFormEnvelopeMetadata',
        :'allow_recipient_language_selection' => :'allowRecipientLanguageSelection',
        :'allow_recipient_language_selection_metadata' => :'allowRecipientLanguageSelectionMetadata',
        :'allow_send_on_behalf_of' => :'allowSendOnBehalfOf',
        :'allow_send_on_behalf_of_metadata' => :'allowSendOnBehalfOfMetadata',
        :'allow_supplemental_documents' => :'allowSupplementalDocuments',
        :'allow_supplemental_documents_metadata' => :'allowSupplementalDocumentsMetadata',
        :'anchor_tag_versioned_placement_enabled' => :'anchorTagVersionedPlacementEnabled',
        :'api_account_wide_access' => :'apiAccountWideAccess',
        :'api_account_wide_access_metadata' => :'apiAccountWideAccessMetadata',
        :'api_can_export_ac' => :'apiCanExportAC',
        :'api_can_export_ac_metadata' => :'apiCanExportACMetadata',
        :'bulk_send' => :'bulkSend',
        :'bulk_send_metadata' => :'bulkSendMetadata',
        :'can_charge_account' => :'canChargeAccount',
        :'can_charge_account_metadata' => :'canChargeAccountMetadata',
        :'can_edit_shared_addressbook' => :'canEditSharedAddressbook',
        :'can_edit_shared_addressbook_metadata' => :'canEditSharedAddressbookMetadata',
        :'can_lock_envelopes' => :'canLockEnvelopes',
        :'can_lock_envelopes_metadata' => :'canLockEnvelopesMetadata',
        :'can_manage_account' => :'canManageAccount',
        :'can_manage_account_metadata' => :'canManageAccountMetadata',
        :'can_manage_distributor' => :'canManageDistributor',
        :'can_manage_distributor_metadata' => :'canManageDistributorMetadata',
        :'can_manage_templates' => :'canManageTemplates',
        :'can_manage_templates_metadata' => :'canManageTemplatesMetadata',
        :'can_send_api_requests' => :'canSendAPIRequests',
        :'can_send_api_requests_metadata' => :'canSendAPIRequestsMetadata',
        :'can_send_envelope' => :'canSendEnvelope',
        :'can_send_envelope_metadata' => :'canSendEnvelopeMetadata',
        :'can_send_envelopes_via_sms' => :'canSendEnvelopesViaSMS',
        :'can_send_envelopes_via_sms_metadata' => :'canSendEnvelopesViaSMSMetadata',
        :'can_sign_envelope' => :'canSignEnvelope',
        :'can_sign_envelope_metadata' => :'canSignEnvelopeMetadata',
        :'can_use_scratchpad' => :'canUseScratchpad',
        :'can_use_scratchpad_metadata' => :'canUseScratchpadMetadata',
        :'can_use_smart_contracts' => :'canUseSmartContracts',
        :'can_use_smart_contracts_metadata' => :'canUseSmartContractsMetadata',
        :'disable_document_upload' => :'disableDocumentUpload',
        :'disable_document_upload_metadata' => :'disableDocumentUploadMetadata',
        :'disable_other_actions' => :'disableOtherActions',
        :'disable_other_actions_metadata' => :'disableOtherActionsMetadata',
        :'enable_ds_pro' => :'enableDSPro',
        :'enable_ds_pro_metadata' => :'enableDSProMetadata',
        :'enable_sequential_signing_api' => :'enableSequentialSigningAPI',
        :'enable_sequential_signing_api_metadata' => :'enableSequentialSigningAPIMetadata',
        :'enable_sequential_signing_ui' => :'enableSequentialSigningUI',
        :'enable_sequential_signing_ui_metadata' => :'enableSequentialSigningUIMetadata',
        :'enable_signer_attachments' => :'enableSignerAttachments',
        :'enable_signer_attachments_metadata' => :'enableSignerAttachmentsMetadata',
        :'enable_sign_on_paper_override' => :'enableSignOnPaperOverride',
        :'enable_sign_on_paper_override_metadata' => :'enableSignOnPaperOverrideMetadata',
        :'enable_transaction_point' => :'enableTransactionPoint',
        :'enable_transaction_point_metadata' => :'enableTransactionPointMetadata',
        :'enable_vaulting' => :'enableVaulting',
        :'enable_vaulting_metadata' => :'enableVaultingMetadata',
        :'express_send_only' => :'expressSendOnly',
        :'locale' => :'locale',
        :'locale_metadata' => :'localeMetadata',
        :'locale_policy' => :'localePolicy',
        :'manage_clickwraps_mode' => :'manageClickwrapsMode',
        :'manage_clickwraps_mode_metadata' => :'manageClickwrapsModeMetadata',
        :'modified_by' => :'modifiedBy',
        :'modified_by_metadata' => :'modifiedByMetadata',
        :'modified_date' => :'modifiedDate',
        :'modified_date_metadata' => :'modifiedDateMetadata',
        :'modified_page' => :'modifiedPage',
        :'modified_page_metadata' => :'modifiedPageMetadata',
        :'new_send_ui' => :'newSendUI',
        :'new_send_ui_metadata' => :'newSendUIMetadata',
        :'power_form_mode' => :'powerFormMode',
        :'power_form_mode_metadata' => :'powerFormModeMetadata',
        :'recipient_viewed_notification' => :'recipientViewedNotification',
        :'recipient_viewed_notification_metadata' => :'recipientViewedNotificationMetadata',
        :'seal_identifiers' => :'sealIdentifiers',
        :'self_signed_recipient_email_document' => :'selfSignedRecipientEmailDocument',
        :'self_signed_recipient_email_document_metadata' => :'selfSignedRecipientEmailDocumentMetadata',
        :'sender_email_notifications' => :'senderEmailNotifications',
        :'signer_email_notifications' => :'signerEmailNotifications',
        :'supplemental_document_include_in_download' => :'supplementalDocumentIncludeInDownload',
        :'supplemental_documents_must_accept' => :'supplementalDocumentsMustAccept',
        :'supplemental_documents_must_accept_metadata' => :'supplementalDocumentsMustAcceptMetadata',
        :'supplemental_documents_must_read' => :'supplementalDocumentsMustRead',
        :'supplemental_documents_must_read_metadata' => :'supplementalDocumentsMustReadMetadata',
        :'supplemental_documents_must_view' => :'supplementalDocumentsMustView',
        :'supplemental_documents_must_view_metadata' => :'supplementalDocumentsMustViewMetadata',
        :'template_active_creation' => :'templateActiveCreation',
        :'template_active_creation_metadata' => :'templateActiveCreationMetadata',
        :'template_apply_notify' => :'templateApplyNotify',
        :'template_apply_notify_metadata' => :'templateApplyNotifyMetadata',
        :'template_auto_matching' => :'templateAutoMatching',
        :'template_auto_matching_metadata' => :'templateAutoMatchingMetadata',
        :'template_matching_sensitivity' => :'templateMatchingSensitivity',
        :'template_matching_sensitivity_metadata' => :'templateMatchingSensitivityMetadata',
        :'template_page_level_matching' => :'templatePageLevelMatching',
        :'template_page_level_matching_metadata' => :'templatePageLevelMatchingMetadata',
        :'timezone_dst' => :'timezoneDST',
        :'timezone_dst_metadata' => :'timezoneDSTMetadata',
        :'timezone_mask' => :'timezoneMask',
        :'timezone_mask_metadata' => :'timezoneMaskMetadata',
        :'timezone_offset' => :'timezoneOffset',
        :'timezone_offset_metadata' => :'timezoneOffsetMetadata',
        :'timezone_sending_pref' => :'timezoneSendingPref',
        :'timezone_sending_pref_metadata' => :'timezoneSendingPrefMetadata',
        :'timezone_signing_pref' => :'timezoneSigningPref',
        :'timezone_signing_pref_metadata' => :'timezoneSigningPrefMetadata',
        :'transaction_point_site_name_url' => :'transactionPointSiteNameURL',
        :'transaction_point_site_name_url_metadata' => :'transactionPointSiteNameURLMetadata',
        :'transaction_point_user_name' => :'transactionPointUserName',
        :'transaction_point_user_name_metadata' => :'transactionPointUserNameMetadata',
        :'vaulting_mode' => :'vaultingMode',
        :'vaulting_mode_metadata' => :'vaultingModeMetadata'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'account_management_granular' => :'UserAccountManagementGranularInformation',
        :'admin_only' => :'String',
        :'admin_only_metadata' => :'SettingsMetadata',
        :'allow_auto_tagging' => :'String',
        :'allow_envelope_transfer_to' => :'String',
        :'allow_envelope_transfer_to_metadata' => :'SettingsMetadata',
        :'allow_eseal_recipients' => :'String',
        :'allow_eseal_recipients_metadata' => :'SettingsMetadata',
        :'allow_power_forms_admin_to_access_all_power_form_envelope' => :'String',
        :'allow_power_forms_admin_to_access_all_power_form_envelope_metadata' => :'SettingsMetadata',
        :'allow_recipient_language_selection' => :'String',
        :'allow_recipient_language_selection_metadata' => :'SettingsMetadata',
        :'allow_send_on_behalf_of' => :'String',
        :'allow_send_on_behalf_of_metadata' => :'SettingsMetadata',
        :'allow_supplemental_documents' => :'String',
        :'allow_supplemental_documents_metadata' => :'SettingsMetadata',
        :'anchor_tag_versioned_placement_enabled' => :'String',
        :'api_account_wide_access' => :'String',
        :'api_account_wide_access_metadata' => :'SettingsMetadata',
        :'api_can_export_ac' => :'String',
        :'api_can_export_ac_metadata' => :'SettingsMetadata',
        :'bulk_send' => :'String',
        :'bulk_send_metadata' => :'SettingsMetadata',
        :'can_charge_account' => :'String',
        :'can_charge_account_metadata' => :'SettingsMetadata',
        :'can_edit_shared_addressbook' => :'String',
        :'can_edit_shared_addressbook_metadata' => :'SettingsMetadata',
        :'can_lock_envelopes' => :'String',
        :'can_lock_envelopes_metadata' => :'SettingsMetadata',
        :'can_manage_account' => :'String',
        :'can_manage_account_metadata' => :'SettingsMetadata',
        :'can_manage_distributor' => :'String',
        :'can_manage_distributor_metadata' => :'SettingsMetadata',
        :'can_manage_templates' => :'String',
        :'can_manage_templates_metadata' => :'SettingsMetadata',
        :'can_send_api_requests' => :'String',
        :'can_send_api_requests_metadata' => :'SettingsMetadata',
        :'can_send_envelope' => :'String',
        :'can_send_envelope_metadata' => :'SettingsMetadata',
        :'can_send_envelopes_via_sms' => :'String',
        :'can_send_envelopes_via_sms_metadata' => :'SettingsMetadata',
        :'can_sign_envelope' => :'String',
        :'can_sign_envelope_metadata' => :'SettingsMetadata',
        :'can_use_scratchpad' => :'String',
        :'can_use_scratchpad_metadata' => :'SettingsMetadata',
        :'can_use_smart_contracts' => :'String',
        :'can_use_smart_contracts_metadata' => :'SettingsMetadata',
        :'disable_document_upload' => :'String',
        :'disable_document_upload_metadata' => :'SettingsMetadata',
        :'disable_other_actions' => :'String',
        :'disable_other_actions_metadata' => :'SettingsMetadata',
        :'enable_ds_pro' => :'String',
        :'enable_ds_pro_metadata' => :'SettingsMetadata',
        :'enable_sequential_signing_api' => :'String',
        :'enable_sequential_signing_api_metadata' => :'SettingsMetadata',
        :'enable_sequential_signing_ui' => :'String',
        :'enable_sequential_signing_ui_metadata' => :'SettingsMetadata',
        :'enable_signer_attachments' => :'String',
        :'enable_signer_attachments_metadata' => :'SettingsMetadata',
        :'enable_sign_on_paper_override' => :'String',
        :'enable_sign_on_paper_override_metadata' => :'SettingsMetadata',
        :'enable_transaction_point' => :'String',
        :'enable_transaction_point_metadata' => :'SettingsMetadata',
        :'enable_vaulting' => :'String',
        :'enable_vaulting_metadata' => :'SettingsMetadata',
        :'express_send_only' => :'String',
        :'locale' => :'String',
        :'locale_metadata' => :'SettingsMetadata',
        :'locale_policy' => :'LocalePolicy',
        :'manage_clickwraps_mode' => :'String',
        :'manage_clickwraps_mode_metadata' => :'SettingsMetadata',
        :'modified_by' => :'String',
        :'modified_by_metadata' => :'SettingsMetadata',
        :'modified_date' => :'String',
        :'modified_date_metadata' => :'SettingsMetadata',
        :'modified_page' => :'String',
        :'modified_page_metadata' => :'SettingsMetadata',
        :'new_send_ui' => :'String',
        :'new_send_ui_metadata' => :'SettingsMetadata',
        :'power_form_mode' => :'String',
        :'power_form_mode_metadata' => :'SettingsMetadata',
        :'recipient_viewed_notification' => :'String',
        :'recipient_viewed_notification_metadata' => :'SettingsMetadata',
        :'seal_identifiers' => :'Array<SealIdentifier>',
        :'self_signed_recipient_email_document' => :'String',
        :'self_signed_recipient_email_document_metadata' => :'SettingsMetadata',
        :'sender_email_notifications' => :'SenderEmailNotifications',
        :'signer_email_notifications' => :'SignerEmailNotifications',
        :'supplemental_document_include_in_download' => :'String',
        :'supplemental_documents_must_accept' => :'String',
        :'supplemental_documents_must_accept_metadata' => :'SettingsMetadata',
        :'supplemental_documents_must_read' => :'String',
        :'supplemental_documents_must_read_metadata' => :'SettingsMetadata',
        :'supplemental_documents_must_view' => :'String',
        :'supplemental_documents_must_view_metadata' => :'SettingsMetadata',
        :'template_active_creation' => :'String',
        :'template_active_creation_metadata' => :'SettingsMetadata',
        :'template_apply_notify' => :'String',
        :'template_apply_notify_metadata' => :'SettingsMetadata',
        :'template_auto_matching' => :'String',
        :'template_auto_matching_metadata' => :'SettingsMetadata',
        :'template_matching_sensitivity' => :'String',
        :'template_matching_sensitivity_metadata' => :'SettingsMetadata',
        :'template_page_level_matching' => :'String',
        :'template_page_level_matching_metadata' => :'SettingsMetadata',
        :'timezone_dst' => :'String',
        :'timezone_dst_metadata' => :'SettingsMetadata',
        :'timezone_mask' => :'String',
        :'timezone_mask_metadata' => :'SettingsMetadata',
        :'timezone_offset' => :'String',
        :'timezone_offset_metadata' => :'SettingsMetadata',
        :'timezone_sending_pref' => :'String',
        :'timezone_sending_pref_metadata' => :'SettingsMetadata',
        :'timezone_signing_pref' => :'String',
        :'timezone_signing_pref_metadata' => :'SettingsMetadata',
        :'transaction_point_site_name_url' => :'String',
        :'transaction_point_site_name_url_metadata' => :'SettingsMetadata',
        :'transaction_point_user_name' => :'String',
        :'transaction_point_user_name_metadata' => :'SettingsMetadata',
        :'vaulting_mode' => :'String',
        :'vaulting_mode_metadata' => :'SettingsMetadata'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'accountManagementGranular')
        self.account_management_granular = attributes[:'accountManagementGranular']
      end

      if attributes.has_key?(:'adminOnly')
        self.admin_only = attributes[:'adminOnly']
      end

      if attributes.has_key?(:'adminOnlyMetadata')
        self.admin_only_metadata = attributes[:'adminOnlyMetadata']
      end

      if attributes.has_key?(:'allowAutoTagging')
        self.allow_auto_tagging = attributes[:'allowAutoTagging']
      end

      if attributes.has_key?(:'allowEnvelopeTransferTo')
        self.allow_envelope_transfer_to = attributes[:'allowEnvelopeTransferTo']
      end

      if attributes.has_key?(:'allowEnvelopeTransferToMetadata')
        self.allow_envelope_transfer_to_metadata = attributes[:'allowEnvelopeTransferToMetadata']
      end

      if attributes.has_key?(:'allowEsealRecipients')
        self.allow_eseal_recipients = attributes[:'allowEsealRecipients']
      end

      if attributes.has_key?(:'allowEsealRecipientsMetadata')
        self.allow_eseal_recipients_metadata = attributes[:'allowEsealRecipientsMetadata']
      end

      if attributes.has_key?(:'allowPowerFormsAdminToAccessAllPowerFormEnvelope')
        self.allow_power_forms_admin_to_access_all_power_form_envelope = attributes[:'allowPowerFormsAdminToAccessAllPowerFormEnvelope']
      end

      if attributes.has_key?(:'allowPowerFormsAdminToAccessAllPowerFormEnvelopeMetadata')
        self.allow_power_forms_admin_to_access_all_power_form_envelope_metadata = attributes[:'allowPowerFormsAdminToAccessAllPowerFormEnvelopeMetadata']
      end

      if attributes.has_key?(:'allowRecipientLanguageSelection')
        self.allow_recipient_language_selection = attributes[:'allowRecipientLanguageSelection']
      end

      if attributes.has_key?(:'allowRecipientLanguageSelectionMetadata')
        self.allow_recipient_language_selection_metadata = attributes[:'allowRecipientLanguageSelectionMetadata']
      end

      if attributes.has_key?(:'allowSendOnBehalfOf')
        self.allow_send_on_behalf_of = attributes[:'allowSendOnBehalfOf']
      end

      if attributes.has_key?(:'allowSendOnBehalfOfMetadata')
        self.allow_send_on_behalf_of_metadata = attributes[:'allowSendOnBehalfOfMetadata']
      end

      if attributes.has_key?(:'allowSupplementalDocuments')
        self.allow_supplemental_documents = attributes[:'allowSupplementalDocuments']
      end

      if attributes.has_key?(:'allowSupplementalDocumentsMetadata')
        self.allow_supplemental_documents_metadata = attributes[:'allowSupplementalDocumentsMetadata']
      end

      if attributes.has_key?(:'anchorTagVersionedPlacementEnabled')
        self.anchor_tag_versioned_placement_enabled = attributes[:'anchorTagVersionedPlacementEnabled']
      end

      if attributes.has_key?(:'apiAccountWideAccess')
        self.api_account_wide_access = attributes[:'apiAccountWideAccess']
      end

      if attributes.has_key?(:'apiAccountWideAccessMetadata')
        self.api_account_wide_access_metadata = attributes[:'apiAccountWideAccessMetadata']
      end

      if attributes.has_key?(:'apiCanExportAC')
        self.api_can_export_ac = attributes[:'apiCanExportAC']
      end

      if attributes.has_key?(:'apiCanExportACMetadata')
        self.api_can_export_ac_metadata = attributes[:'apiCanExportACMetadata']
      end

      if attributes.has_key?(:'bulkSend')
        self.bulk_send = attributes[:'bulkSend']
      end

      if attributes.has_key?(:'bulkSendMetadata')
        self.bulk_send_metadata = attributes[:'bulkSendMetadata']
      end

      if attributes.has_key?(:'canChargeAccount')
        self.can_charge_account = attributes[:'canChargeAccount']
      end

      if attributes.has_key?(:'canChargeAccountMetadata')
        self.can_charge_account_metadata = attributes[:'canChargeAccountMetadata']
      end

      if attributes.has_key?(:'canEditSharedAddressbook')
        self.can_edit_shared_addressbook = attributes[:'canEditSharedAddressbook']
      end

      if attributes.has_key?(:'canEditSharedAddressbookMetadata')
        self.can_edit_shared_addressbook_metadata = attributes[:'canEditSharedAddressbookMetadata']
      end

      if attributes.has_key?(:'canLockEnvelopes')
        self.can_lock_envelopes = attributes[:'canLockEnvelopes']
      end

      if attributes.has_key?(:'canLockEnvelopesMetadata')
        self.can_lock_envelopes_metadata = attributes[:'canLockEnvelopesMetadata']
      end

      if attributes.has_key?(:'canManageAccount')
        self.can_manage_account = attributes[:'canManageAccount']
      end

      if attributes.has_key?(:'canManageAccountMetadata')
        self.can_manage_account_metadata = attributes[:'canManageAccountMetadata']
      end

      if attributes.has_key?(:'canManageDistributor')
        self.can_manage_distributor = attributes[:'canManageDistributor']
      end

      if attributes.has_key?(:'canManageDistributorMetadata')
        self.can_manage_distributor_metadata = attributes[:'canManageDistributorMetadata']
      end

      if attributes.has_key?(:'canManageTemplates')
        self.can_manage_templates = attributes[:'canManageTemplates']
      end

      if attributes.has_key?(:'canManageTemplatesMetadata')
        self.can_manage_templates_metadata = attributes[:'canManageTemplatesMetadata']
      end

      if attributes.has_key?(:'canSendAPIRequests')
        self.can_send_api_requests = attributes[:'canSendAPIRequests']
      end

      if attributes.has_key?(:'canSendAPIRequestsMetadata')
        self.can_send_api_requests_metadata = attributes[:'canSendAPIRequestsMetadata']
      end

      if attributes.has_key?(:'canSendEnvelope')
        self.can_send_envelope = attributes[:'canSendEnvelope']
      end

      if attributes.has_key?(:'canSendEnvelopeMetadata')
        self.can_send_envelope_metadata = attributes[:'canSendEnvelopeMetadata']
      end

      if attributes.has_key?(:'canSendEnvelopesViaSMS')
        self.can_send_envelopes_via_sms = attributes[:'canSendEnvelopesViaSMS']
      end

      if attributes.has_key?(:'canSendEnvelopesViaSMSMetadata')
        self.can_send_envelopes_via_sms_metadata = attributes[:'canSendEnvelopesViaSMSMetadata']
      end

      if attributes.has_key?(:'canSignEnvelope')
        self.can_sign_envelope = attributes[:'canSignEnvelope']
      end

      if attributes.has_key?(:'canSignEnvelopeMetadata')
        self.can_sign_envelope_metadata = attributes[:'canSignEnvelopeMetadata']
      end

      if attributes.has_key?(:'canUseScratchpad')
        self.can_use_scratchpad = attributes[:'canUseScratchpad']
      end

      if attributes.has_key?(:'canUseScratchpadMetadata')
        self.can_use_scratchpad_metadata = attributes[:'canUseScratchpadMetadata']
      end

      if attributes.has_key?(:'canUseSmartContracts')
        self.can_use_smart_contracts = attributes[:'canUseSmartContracts']
      end

      if attributes.has_key?(:'canUseSmartContractsMetadata')
        self.can_use_smart_contracts_metadata = attributes[:'canUseSmartContractsMetadata']
      end

      if attributes.has_key?(:'disableDocumentUpload')
        self.disable_document_upload = attributes[:'disableDocumentUpload']
      end

      if attributes.has_key?(:'disableDocumentUploadMetadata')
        self.disable_document_upload_metadata = attributes[:'disableDocumentUploadMetadata']
      end

      if attributes.has_key?(:'disableOtherActions')
        self.disable_other_actions = attributes[:'disableOtherActions']
      end

      if attributes.has_key?(:'disableOtherActionsMetadata')
        self.disable_other_actions_metadata = attributes[:'disableOtherActionsMetadata']
      end

      if attributes.has_key?(:'enableDSPro')
        self.enable_ds_pro = attributes[:'enableDSPro']
      end

      if attributes.has_key?(:'enableDSProMetadata')
        self.enable_ds_pro_metadata = attributes[:'enableDSProMetadata']
      end

      if attributes.has_key?(:'enableSequentialSigningAPI')
        self.enable_sequential_signing_api = attributes[:'enableSequentialSigningAPI']
      end

      if attributes.has_key?(:'enableSequentialSigningAPIMetadata')
        self.enable_sequential_signing_api_metadata = attributes[:'enableSequentialSigningAPIMetadata']
      end

      if attributes.has_key?(:'enableSequentialSigningUI')
        self.enable_sequential_signing_ui = attributes[:'enableSequentialSigningUI']
      end

      if attributes.has_key?(:'enableSequentialSigningUIMetadata')
        self.enable_sequential_signing_ui_metadata = attributes[:'enableSequentialSigningUIMetadata']
      end

      if attributes.has_key?(:'enableSignerAttachments')
        self.enable_signer_attachments = attributes[:'enableSignerAttachments']
      end

      if attributes.has_key?(:'enableSignerAttachmentsMetadata')
        self.enable_signer_attachments_metadata = attributes[:'enableSignerAttachmentsMetadata']
      end

      if attributes.has_key?(:'enableSignOnPaperOverride')
        self.enable_sign_on_paper_override = attributes[:'enableSignOnPaperOverride']
      end

      if attributes.has_key?(:'enableSignOnPaperOverrideMetadata')
        self.enable_sign_on_paper_override_metadata = attributes[:'enableSignOnPaperOverrideMetadata']
      end

      if attributes.has_key?(:'enableTransactionPoint')
        self.enable_transaction_point = attributes[:'enableTransactionPoint']
      end

      if attributes.has_key?(:'enableTransactionPointMetadata')
        self.enable_transaction_point_metadata = attributes[:'enableTransactionPointMetadata']
      end

      if attributes.has_key?(:'enableVaulting')
        self.enable_vaulting = attributes[:'enableVaulting']
      end

      if attributes.has_key?(:'enableVaultingMetadata')
        self.enable_vaulting_metadata = attributes[:'enableVaultingMetadata']
      end

      if attributes.has_key?(:'expressSendOnly')
        self.express_send_only = attributes[:'expressSendOnly']
      end

      if attributes.has_key?(:'locale')
        self.locale = attributes[:'locale']
      end

      if attributes.has_key?(:'localeMetadata')
        self.locale_metadata = attributes[:'localeMetadata']
      end

      if attributes.has_key?(:'localePolicy')
        self.locale_policy = attributes[:'localePolicy']
      end

      if attributes.has_key?(:'manageClickwrapsMode')
        self.manage_clickwraps_mode = attributes[:'manageClickwrapsMode']
      end

      if attributes.has_key?(:'manageClickwrapsModeMetadata')
        self.manage_clickwraps_mode_metadata = attributes[:'manageClickwrapsModeMetadata']
      end

      if attributes.has_key?(:'modifiedBy')
        self.modified_by = attributes[:'modifiedBy']
      end

      if attributes.has_key?(:'modifiedByMetadata')
        self.modified_by_metadata = attributes[:'modifiedByMetadata']
      end

      if attributes.has_key?(:'modifiedDate')
        self.modified_date = attributes[:'modifiedDate']
      end

      if attributes.has_key?(:'modifiedDateMetadata')
        self.modified_date_metadata = attributes[:'modifiedDateMetadata']
      end

      if attributes.has_key?(:'modifiedPage')
        self.modified_page = attributes[:'modifiedPage']
      end

      if attributes.has_key?(:'modifiedPageMetadata')
        self.modified_page_metadata = attributes[:'modifiedPageMetadata']
      end

      if attributes.has_key?(:'newSendUI')
        self.new_send_ui = attributes[:'newSendUI']
      end

      if attributes.has_key?(:'newSendUIMetadata')
        self.new_send_ui_metadata = attributes[:'newSendUIMetadata']
      end

      if attributes.has_key?(:'powerFormMode')
        self.power_form_mode = attributes[:'powerFormMode']
      end

      if attributes.has_key?(:'powerFormModeMetadata')
        self.power_form_mode_metadata = attributes[:'powerFormModeMetadata']
      end

      if attributes.has_key?(:'recipientViewedNotification')
        self.recipient_viewed_notification = attributes[:'recipientViewedNotification']
      end

      if attributes.has_key?(:'recipientViewedNotificationMetadata')
        self.recipient_viewed_notification_metadata = attributes[:'recipientViewedNotificationMetadata']
      end

      if attributes.has_key?(:'sealIdentifiers')
        if (value = attributes[:'sealIdentifiers']).is_a?(Array)
          self.seal_identifiers = value
        end
      end

      if attributes.has_key?(:'selfSignedRecipientEmailDocument')
        self.self_signed_recipient_email_document = attributes[:'selfSignedRecipientEmailDocument']
      end

      if attributes.has_key?(:'selfSignedRecipientEmailDocumentMetadata')
        self.self_signed_recipient_email_document_metadata = attributes[:'selfSignedRecipientEmailDocumentMetadata']
      end

      if attributes.has_key?(:'senderEmailNotifications')
        self.sender_email_notifications = attributes[:'senderEmailNotifications']
      end

      if attributes.has_key?(:'signerEmailNotifications')
        self.signer_email_notifications = attributes[:'signerEmailNotifications']
      end

      if attributes.has_key?(:'supplementalDocumentIncludeInDownload')
        self.supplemental_document_include_in_download = attributes[:'supplementalDocumentIncludeInDownload']
      end

      if attributes.has_key?(:'supplementalDocumentsMustAccept')
        self.supplemental_documents_must_accept = attributes[:'supplementalDocumentsMustAccept']
      end

      if attributes.has_key?(:'supplementalDocumentsMustAcceptMetadata')
        self.supplemental_documents_must_accept_metadata = attributes[:'supplementalDocumentsMustAcceptMetadata']
      end

      if attributes.has_key?(:'supplementalDocumentsMustRead')
        self.supplemental_documents_must_read = attributes[:'supplementalDocumentsMustRead']
      end

      if attributes.has_key?(:'supplementalDocumentsMustReadMetadata')
        self.supplemental_documents_must_read_metadata = attributes[:'supplementalDocumentsMustReadMetadata']
      end

      if attributes.has_key?(:'supplementalDocumentsMustView')
        self.supplemental_documents_must_view = attributes[:'supplementalDocumentsMustView']
      end

      if attributes.has_key?(:'supplementalDocumentsMustViewMetadata')
        self.supplemental_documents_must_view_metadata = attributes[:'supplementalDocumentsMustViewMetadata']
      end

      if attributes.has_key?(:'templateActiveCreation')
        self.template_active_creation = attributes[:'templateActiveCreation']
      end

      if attributes.has_key?(:'templateActiveCreationMetadata')
        self.template_active_creation_metadata = attributes[:'templateActiveCreationMetadata']
      end

      if attributes.has_key?(:'templateApplyNotify')
        self.template_apply_notify = attributes[:'templateApplyNotify']
      end

      if attributes.has_key?(:'templateApplyNotifyMetadata')
        self.template_apply_notify_metadata = attributes[:'templateApplyNotifyMetadata']
      end

      if attributes.has_key?(:'templateAutoMatching')
        self.template_auto_matching = attributes[:'templateAutoMatching']
      end

      if attributes.has_key?(:'templateAutoMatchingMetadata')
        self.template_auto_matching_metadata = attributes[:'templateAutoMatchingMetadata']
      end

      if attributes.has_key?(:'templateMatchingSensitivity')
        self.template_matching_sensitivity = attributes[:'templateMatchingSensitivity']
      end

      if attributes.has_key?(:'templateMatchingSensitivityMetadata')
        self.template_matching_sensitivity_metadata = attributes[:'templateMatchingSensitivityMetadata']
      end

      if attributes.has_key?(:'templatePageLevelMatching')
        self.template_page_level_matching = attributes[:'templatePageLevelMatching']
      end

      if attributes.has_key?(:'templatePageLevelMatchingMetadata')
        self.template_page_level_matching_metadata = attributes[:'templatePageLevelMatchingMetadata']
      end

      if attributes.has_key?(:'timezoneDST')
        self.timezone_dst = attributes[:'timezoneDST']
      end

      if attributes.has_key?(:'timezoneDSTMetadata')
        self.timezone_dst_metadata = attributes[:'timezoneDSTMetadata']
      end

      if attributes.has_key?(:'timezoneMask')
        self.timezone_mask = attributes[:'timezoneMask']
      end

      if attributes.has_key?(:'timezoneMaskMetadata')
        self.timezone_mask_metadata = attributes[:'timezoneMaskMetadata']
      end

      if attributes.has_key?(:'timezoneOffset')
        self.timezone_offset = attributes[:'timezoneOffset']
      end

      if attributes.has_key?(:'timezoneOffsetMetadata')
        self.timezone_offset_metadata = attributes[:'timezoneOffsetMetadata']
      end

      if attributes.has_key?(:'timezoneSendingPref')
        self.timezone_sending_pref = attributes[:'timezoneSendingPref']
      end

      if attributes.has_key?(:'timezoneSendingPrefMetadata')
        self.timezone_sending_pref_metadata = attributes[:'timezoneSendingPrefMetadata']
      end

      if attributes.has_key?(:'timezoneSigningPref')
        self.timezone_signing_pref = attributes[:'timezoneSigningPref']
      end

      if attributes.has_key?(:'timezoneSigningPrefMetadata')
        self.timezone_signing_pref_metadata = attributes[:'timezoneSigningPrefMetadata']
      end

      if attributes.has_key?(:'transactionPointSiteNameURL')
        self.transaction_point_site_name_url = attributes[:'transactionPointSiteNameURL']
      end

      if attributes.has_key?(:'transactionPointSiteNameURLMetadata')
        self.transaction_point_site_name_url_metadata = attributes[:'transactionPointSiteNameURLMetadata']
      end

      if attributes.has_key?(:'transactionPointUserName')
        self.transaction_point_user_name = attributes[:'transactionPointUserName']
      end

      if attributes.has_key?(:'transactionPointUserNameMetadata')
        self.transaction_point_user_name_metadata = attributes[:'transactionPointUserNameMetadata']
      end

      if attributes.has_key?(:'vaultingMode')
        self.vaulting_mode = attributes[:'vaultingMode']
      end

      if attributes.has_key?(:'vaultingModeMetadata')
        self.vaulting_mode_metadata = attributes[:'vaultingModeMetadata']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_management_granular == o.account_management_granular &&
          admin_only == o.admin_only &&
          admin_only_metadata == o.admin_only_metadata &&
          allow_auto_tagging == o.allow_auto_tagging &&
          allow_envelope_transfer_to == o.allow_envelope_transfer_to &&
          allow_envelope_transfer_to_metadata == o.allow_envelope_transfer_to_metadata &&
          allow_eseal_recipients == o.allow_eseal_recipients &&
          allow_eseal_recipients_metadata == o.allow_eseal_recipients_metadata &&
          allow_power_forms_admin_to_access_all_power_form_envelope == o.allow_power_forms_admin_to_access_all_power_form_envelope &&
          allow_power_forms_admin_to_access_all_power_form_envelope_metadata == o.allow_power_forms_admin_to_access_all_power_form_envelope_metadata &&
          allow_recipient_language_selection == o.allow_recipient_language_selection &&
          allow_recipient_language_selection_metadata == o.allow_recipient_language_selection_metadata &&
          allow_send_on_behalf_of == o.allow_send_on_behalf_of &&
          allow_send_on_behalf_of_metadata == o.allow_send_on_behalf_of_metadata &&
          allow_supplemental_documents == o.allow_supplemental_documents &&
          allow_supplemental_documents_metadata == o.allow_supplemental_documents_metadata &&
          anchor_tag_versioned_placement_enabled == o.anchor_tag_versioned_placement_enabled &&
          api_account_wide_access == o.api_account_wide_access &&
          api_account_wide_access_metadata == o.api_account_wide_access_metadata &&
          api_can_export_ac == o.api_can_export_ac &&
          api_can_export_ac_metadata == o.api_can_export_ac_metadata &&
          bulk_send == o.bulk_send &&
          bulk_send_metadata == o.bulk_send_metadata &&
          can_charge_account == o.can_charge_account &&
          can_charge_account_metadata == o.can_charge_account_metadata &&
          can_edit_shared_addressbook == o.can_edit_shared_addressbook &&
          can_edit_shared_addressbook_metadata == o.can_edit_shared_addressbook_metadata &&
          can_lock_envelopes == o.can_lock_envelopes &&
          can_lock_envelopes_metadata == o.can_lock_envelopes_metadata &&
          can_manage_account == o.can_manage_account &&
          can_manage_account_metadata == o.can_manage_account_metadata &&
          can_manage_distributor == o.can_manage_distributor &&
          can_manage_distributor_metadata == o.can_manage_distributor_metadata &&
          can_manage_templates == o.can_manage_templates &&
          can_manage_templates_metadata == o.can_manage_templates_metadata &&
          can_send_api_requests == o.can_send_api_requests &&
          can_send_api_requests_metadata == o.can_send_api_requests_metadata &&
          can_send_envelope == o.can_send_envelope &&
          can_send_envelope_metadata == o.can_send_envelope_metadata &&
          can_send_envelopes_via_sms == o.can_send_envelopes_via_sms &&
          can_send_envelopes_via_sms_metadata == o.can_send_envelopes_via_sms_metadata &&
          can_sign_envelope == o.can_sign_envelope &&
          can_sign_envelope_metadata == o.can_sign_envelope_metadata &&
          can_use_scratchpad == o.can_use_scratchpad &&
          can_use_scratchpad_metadata == o.can_use_scratchpad_metadata &&
          can_use_smart_contracts == o.can_use_smart_contracts &&
          can_use_smart_contracts_metadata == o.can_use_smart_contracts_metadata &&
          disable_document_upload == o.disable_document_upload &&
          disable_document_upload_metadata == o.disable_document_upload_metadata &&
          disable_other_actions == o.disable_other_actions &&
          disable_other_actions_metadata == o.disable_other_actions_metadata &&
          enable_ds_pro == o.enable_ds_pro &&
          enable_ds_pro_metadata == o.enable_ds_pro_metadata &&
          enable_sequential_signing_api == o.enable_sequential_signing_api &&
          enable_sequential_signing_api_metadata == o.enable_sequential_signing_api_metadata &&
          enable_sequential_signing_ui == o.enable_sequential_signing_ui &&
          enable_sequential_signing_ui_metadata == o.enable_sequential_signing_ui_metadata &&
          enable_signer_attachments == o.enable_signer_attachments &&
          enable_signer_attachments_metadata == o.enable_signer_attachments_metadata &&
          enable_sign_on_paper_override == o.enable_sign_on_paper_override &&
          enable_sign_on_paper_override_metadata == o.enable_sign_on_paper_override_metadata &&
          enable_transaction_point == o.enable_transaction_point &&
          enable_transaction_point_metadata == o.enable_transaction_point_metadata &&
          enable_vaulting == o.enable_vaulting &&
          enable_vaulting_metadata == o.enable_vaulting_metadata &&
          express_send_only == o.express_send_only &&
          locale == o.locale &&
          locale_metadata == o.locale_metadata &&
          locale_policy == o.locale_policy &&
          manage_clickwraps_mode == o.manage_clickwraps_mode &&
          manage_clickwraps_mode_metadata == o.manage_clickwraps_mode_metadata &&
          modified_by == o.modified_by &&
          modified_by_metadata == o.modified_by_metadata &&
          modified_date == o.modified_date &&
          modified_date_metadata == o.modified_date_metadata &&
          modified_page == o.modified_page &&
          modified_page_metadata == o.modified_page_metadata &&
          new_send_ui == o.new_send_ui &&
          new_send_ui_metadata == o.new_send_ui_metadata &&
          power_form_mode == o.power_form_mode &&
          power_form_mode_metadata == o.power_form_mode_metadata &&
          recipient_viewed_notification == o.recipient_viewed_notification &&
          recipient_viewed_notification_metadata == o.recipient_viewed_notification_metadata &&
          seal_identifiers == o.seal_identifiers &&
          self_signed_recipient_email_document == o.self_signed_recipient_email_document &&
          self_signed_recipient_email_document_metadata == o.self_signed_recipient_email_document_metadata &&
          sender_email_notifications == o.sender_email_notifications &&
          signer_email_notifications == o.signer_email_notifications &&
          supplemental_document_include_in_download == o.supplemental_document_include_in_download &&
          supplemental_documents_must_accept == o.supplemental_documents_must_accept &&
          supplemental_documents_must_accept_metadata == o.supplemental_documents_must_accept_metadata &&
          supplemental_documents_must_read == o.supplemental_documents_must_read &&
          supplemental_documents_must_read_metadata == o.supplemental_documents_must_read_metadata &&
          supplemental_documents_must_view == o.supplemental_documents_must_view &&
          supplemental_documents_must_view_metadata == o.supplemental_documents_must_view_metadata &&
          template_active_creation == o.template_active_creation &&
          template_active_creation_metadata == o.template_active_creation_metadata &&
          template_apply_notify == o.template_apply_notify &&
          template_apply_notify_metadata == o.template_apply_notify_metadata &&
          template_auto_matching == o.template_auto_matching &&
          template_auto_matching_metadata == o.template_auto_matching_metadata &&
          template_matching_sensitivity == o.template_matching_sensitivity &&
          template_matching_sensitivity_metadata == o.template_matching_sensitivity_metadata &&
          template_page_level_matching == o.template_page_level_matching &&
          template_page_level_matching_metadata == o.template_page_level_matching_metadata &&
          timezone_dst == o.timezone_dst &&
          timezone_dst_metadata == o.timezone_dst_metadata &&
          timezone_mask == o.timezone_mask &&
          timezone_mask_metadata == o.timezone_mask_metadata &&
          timezone_offset == o.timezone_offset &&
          timezone_offset_metadata == o.timezone_offset_metadata &&
          timezone_sending_pref == o.timezone_sending_pref &&
          timezone_sending_pref_metadata == o.timezone_sending_pref_metadata &&
          timezone_signing_pref == o.timezone_signing_pref &&
          timezone_signing_pref_metadata == o.timezone_signing_pref_metadata &&
          transaction_point_site_name_url == o.transaction_point_site_name_url &&
          transaction_point_site_name_url_metadata == o.transaction_point_site_name_url_metadata &&
          transaction_point_user_name == o.transaction_point_user_name &&
          transaction_point_user_name_metadata == o.transaction_point_user_name_metadata &&
          vaulting_mode == o.vaulting_mode &&
          vaulting_mode_metadata == o.vaulting_mode_metadata
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [account_management_granular, admin_only, admin_only_metadata, allow_auto_tagging, allow_envelope_transfer_to, allow_envelope_transfer_to_metadata, allow_eseal_recipients, allow_eseal_recipients_metadata, allow_power_forms_admin_to_access_all_power_form_envelope, allow_power_forms_admin_to_access_all_power_form_envelope_metadata, allow_recipient_language_selection, allow_recipient_language_selection_metadata, allow_send_on_behalf_of, allow_send_on_behalf_of_metadata, allow_supplemental_documents, allow_supplemental_documents_metadata, anchor_tag_versioned_placement_enabled, api_account_wide_access, api_account_wide_access_metadata, api_can_export_ac, api_can_export_ac_metadata, bulk_send, bulk_send_metadata, can_charge_account, can_charge_account_metadata, can_edit_shared_addressbook, can_edit_shared_addressbook_metadata, can_lock_envelopes, can_lock_envelopes_metadata, can_manage_account, can_manage_account_metadata, can_manage_distributor, can_manage_distributor_metadata, can_manage_templates, can_manage_templates_metadata, can_send_api_requests, can_send_api_requests_metadata, can_send_envelope, can_send_envelope_metadata, can_send_envelopes_via_sms, can_send_envelopes_via_sms_metadata, can_sign_envelope, can_sign_envelope_metadata, can_use_scratchpad, can_use_scratchpad_metadata, can_use_smart_contracts, can_use_smart_contracts_metadata, disable_document_upload, disable_document_upload_metadata, disable_other_actions, disable_other_actions_metadata, enable_ds_pro, enable_ds_pro_metadata, enable_sequential_signing_api, enable_sequential_signing_api_metadata, enable_sequential_signing_ui, enable_sequential_signing_ui_metadata, enable_signer_attachments, enable_signer_attachments_metadata, enable_sign_on_paper_override, enable_sign_on_paper_override_metadata, enable_transaction_point, enable_transaction_point_metadata, enable_vaulting, enable_vaulting_metadata, express_send_only, locale, locale_metadata, locale_policy, manage_clickwraps_mode, manage_clickwraps_mode_metadata, modified_by, modified_by_metadata, modified_date, modified_date_metadata, modified_page, modified_page_metadata, new_send_ui, new_send_ui_metadata, power_form_mode, power_form_mode_metadata, recipient_viewed_notification, recipient_viewed_notification_metadata, seal_identifiers, self_signed_recipient_email_document, self_signed_recipient_email_document_metadata, sender_email_notifications, signer_email_notifications, supplemental_document_include_in_download, supplemental_documents_must_accept, supplemental_documents_must_accept_metadata, supplemental_documents_must_read, supplemental_documents_must_read_metadata, supplemental_documents_must_view, supplemental_documents_must_view_metadata, template_active_creation, template_active_creation_metadata, template_apply_notify, template_apply_notify_metadata, template_auto_matching, template_auto_matching_metadata, template_matching_sensitivity, template_matching_sensitivity_metadata, template_page_level_matching, template_page_level_matching_metadata, timezone_dst, timezone_dst_metadata, timezone_mask, timezone_mask_metadata, timezone_offset, timezone_offset_metadata, timezone_sending_pref, timezone_sending_pref_metadata, timezone_signing_pref, timezone_signing_pref_metadata, transaction_point_site_name_url, transaction_point_site_name_url_metadata, transaction_point_user_name, transaction_point_user_name_metadata, vaulting_mode, vaulting_mode_metadata].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_eSign.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
