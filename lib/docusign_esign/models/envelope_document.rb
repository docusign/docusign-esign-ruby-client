=begin
#DocuSign REST API

#The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

OpenAPI spec version: v2.1
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module DocuSign_eSign
  class EnvelopeDocument
    # 
    attr_accessor :added_recipient_ids

    # 
    attr_accessor :attachment_tab_id

    # Specifies the Authoritative copy feature. If set to true the Authoritative copy feature is enabled.
    attr_accessor :authoritative_copy

    attr_accessor :authoritative_copy_metadata

    # 
    attr_accessor :available_document_types

    # 
    attr_accessor :contains_pdf_form_fields

    # 
    attr_accessor :display

    attr_accessor :display_metadata

    # 
    attr_accessor :document_base64

    # 
    attr_accessor :document_fields

    # Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
    attr_accessor :document_id

    # 
    attr_accessor :document_id_guid

    attr_accessor :error_details

    # 
    attr_accessor :include_in_download

    attr_accessor :include_in_download_metadata

    # 
    attr_accessor :name

    attr_accessor :name_metadata

    # 
    attr_accessor :order

    # 
    attr_accessor :pages

    # 
    attr_accessor :signer_must_acknowledge

    attr_accessor :signer_must_acknowledge_metadata

    # 
    attr_accessor :size_bytes

    # When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
    attr_accessor :template_locked

    # When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
    attr_accessor :template_required

    # 
    attr_accessor :type

    # 
    attr_accessor :uri

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'added_recipient_ids' => :'addedRecipientIds',
        :'attachment_tab_id' => :'attachmentTabId',
        :'authoritative_copy' => :'authoritativeCopy',
        :'authoritative_copy_metadata' => :'authoritativeCopyMetadata',
        :'available_document_types' => :'availableDocumentTypes',
        :'contains_pdf_form_fields' => :'containsPdfFormFields',
        :'display' => :'display',
        :'display_metadata' => :'displayMetadata',
        :'document_base64' => :'documentBase64',
        :'document_fields' => :'documentFields',
        :'document_id' => :'documentId',
        :'document_id_guid' => :'documentIdGuid',
        :'error_details' => :'errorDetails',
        :'include_in_download' => :'includeInDownload',
        :'include_in_download_metadata' => :'includeInDownloadMetadata',
        :'name' => :'name',
        :'name_metadata' => :'nameMetadata',
        :'order' => :'order',
        :'pages' => :'pages',
        :'signer_must_acknowledge' => :'signerMustAcknowledge',
        :'signer_must_acknowledge_metadata' => :'signerMustAcknowledgeMetadata',
        :'size_bytes' => :'sizeBytes',
        :'template_locked' => :'templateLocked',
        :'template_required' => :'templateRequired',
        :'type' => :'type',
        :'uri' => :'uri'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'added_recipient_ids' => :'Array<String>',
        :'attachment_tab_id' => :'String',
        :'authoritative_copy' => :'String',
        :'authoritative_copy_metadata' => :'PropertyMetadata',
        :'available_document_types' => :'Array<SignatureType>',
        :'contains_pdf_form_fields' => :'String',
        :'display' => :'String',
        :'display_metadata' => :'PropertyMetadata',
        :'document_base64' => :'String',
        :'document_fields' => :'Array<NameValue>',
        :'document_id' => :'String',
        :'document_id_guid' => :'String',
        :'error_details' => :'ErrorDetails',
        :'include_in_download' => :'String',
        :'include_in_download_metadata' => :'PropertyMetadata',
        :'name' => :'String',
        :'name_metadata' => :'PropertyMetadata',
        :'order' => :'String',
        :'pages' => :'Array<Page>',
        :'signer_must_acknowledge' => :'String',
        :'signer_must_acknowledge_metadata' => :'PropertyMetadata',
        :'size_bytes' => :'String',
        :'template_locked' => :'String',
        :'template_required' => :'String',
        :'type' => :'String',
        :'uri' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'addedRecipientIds')
        if (value = attributes[:'addedRecipientIds']).is_a?(Array)
          self.added_recipient_ids = value
        end
      end

      if attributes.has_key?(:'attachmentTabId')
        self.attachment_tab_id = attributes[:'attachmentTabId']
      end

      if attributes.has_key?(:'authoritativeCopy')
        self.authoritative_copy = attributes[:'authoritativeCopy']
      end

      if attributes.has_key?(:'authoritativeCopyMetadata')
        self.authoritative_copy_metadata = attributes[:'authoritativeCopyMetadata']
      end

      if attributes.has_key?(:'availableDocumentTypes')
        if (value = attributes[:'availableDocumentTypes']).is_a?(Array)
          self.available_document_types = value
        end
      end

      if attributes.has_key?(:'containsPdfFormFields')
        self.contains_pdf_form_fields = attributes[:'containsPdfFormFields']
      end

      if attributes.has_key?(:'display')
        self.display = attributes[:'display']
      end

      if attributes.has_key?(:'displayMetadata')
        self.display_metadata = attributes[:'displayMetadata']
      end

      if attributes.has_key?(:'documentBase64')
        self.document_base64 = attributes[:'documentBase64']
      end

      if attributes.has_key?(:'documentFields')
        if (value = attributes[:'documentFields']).is_a?(Array)
          self.document_fields = value
        end
      end

      if attributes.has_key?(:'documentId')
        self.document_id = attributes[:'documentId']
      end

      if attributes.has_key?(:'documentIdGuid')
        self.document_id_guid = attributes[:'documentIdGuid']
      end

      if attributes.has_key?(:'errorDetails')
        self.error_details = attributes[:'errorDetails']
      end

      if attributes.has_key?(:'includeInDownload')
        self.include_in_download = attributes[:'includeInDownload']
      end

      if attributes.has_key?(:'includeInDownloadMetadata')
        self.include_in_download_metadata = attributes[:'includeInDownloadMetadata']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'nameMetadata')
        self.name_metadata = attributes[:'nameMetadata']
      end

      if attributes.has_key?(:'order')
        self.order = attributes[:'order']
      end

      if attributes.has_key?(:'pages')
        if (value = attributes[:'pages']).is_a?(Array)
          self.pages = value
        end
      end

      if attributes.has_key?(:'signerMustAcknowledge')
        self.signer_must_acknowledge = attributes[:'signerMustAcknowledge']
      end

      if attributes.has_key?(:'signerMustAcknowledgeMetadata')
        self.signer_must_acknowledge_metadata = attributes[:'signerMustAcknowledgeMetadata']
      end

      if attributes.has_key?(:'sizeBytes')
        self.size_bytes = attributes[:'sizeBytes']
      end

      if attributes.has_key?(:'templateLocked')
        self.template_locked = attributes[:'templateLocked']
      end

      if attributes.has_key?(:'templateRequired')
        self.template_required = attributes[:'templateRequired']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'uri')
        self.uri = attributes[:'uri']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          added_recipient_ids == o.added_recipient_ids &&
          attachment_tab_id == o.attachment_tab_id &&
          authoritative_copy == o.authoritative_copy &&
          authoritative_copy_metadata == o.authoritative_copy_metadata &&
          available_document_types == o.available_document_types &&
          contains_pdf_form_fields == o.contains_pdf_form_fields &&
          display == o.display &&
          display_metadata == o.display_metadata &&
          document_base64 == o.document_base64 &&
          document_fields == o.document_fields &&
          document_id == o.document_id &&
          document_id_guid == o.document_id_guid &&
          error_details == o.error_details &&
          include_in_download == o.include_in_download &&
          include_in_download_metadata == o.include_in_download_metadata &&
          name == o.name &&
          name_metadata == o.name_metadata &&
          order == o.order &&
          pages == o.pages &&
          signer_must_acknowledge == o.signer_must_acknowledge &&
          signer_must_acknowledge_metadata == o.signer_must_acknowledge_metadata &&
          size_bytes == o.size_bytes &&
          template_locked == o.template_locked &&
          template_required == o.template_required &&
          type == o.type &&
          uri == o.uri
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [added_recipient_ids, attachment_tab_id, authoritative_copy, authoritative_copy_metadata, available_document_types, contains_pdf_form_fields, display, display_metadata, document_base64, document_fields, document_id, document_id_guid, error_details, include_in_download, include_in_download_metadata, name, name_metadata, order, pages, signer_must_acknowledge, signer_must_acknowledge_metadata, size_bytes, template_locked, template_required, type, uri].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_eSign.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
