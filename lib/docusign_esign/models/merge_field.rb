=begin
#DocuSign REST API

#The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

OpenAPI spec version: v2.1
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module DocuSign_eSign
  # Contains information for transfering values between Salesforce data fields and DocuSign Tabs.
  class MergeField
    # When set to **true**, the sender can modify the value of the custom tab during the sending process.
    attr_accessor :allow_sender_to_edit

    attr_accessor :allow_sender_to_edit_metadata

    # If merge field's are being used, specifies the type of the merge field. The only  supported value is **salesforce**.
    attr_accessor :configuration_type

    attr_accessor :configuration_type_metadata

    # Sets the object associated with the custom tab. Currently this is the Salesforce Object.
    attr_accessor :path

    # 
    attr_accessor :path_extended

    attr_accessor :path_extended_metadata

    attr_accessor :path_metadata

    # Specifies the row number in a Salesforce table that the merge field value corresponds to.
    attr_accessor :row

    attr_accessor :row_metadata

    # When wet to true, the information entered in the tab automatically updates the related Salesforce data when an envelope is completed.
    attr_accessor :write_back

    attr_accessor :write_back_metadata


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'allow_sender_to_edit' => :'allowSenderToEdit',
        :'allow_sender_to_edit_metadata' => :'allowSenderToEditMetadata',
        :'configuration_type' => :'configurationType',
        :'configuration_type_metadata' => :'configurationTypeMetadata',
        :'path' => :'path',
        :'path_extended' => :'pathExtended',
        :'path_extended_metadata' => :'pathExtendedMetadata',
        :'path_metadata' => :'pathMetadata',
        :'row' => :'row',
        :'row_metadata' => :'rowMetadata',
        :'write_back' => :'writeBack',
        :'write_back_metadata' => :'writeBackMetadata'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'allow_sender_to_edit' => :'String',
        :'allow_sender_to_edit_metadata' => :'PropertyMetadata',
        :'configuration_type' => :'String',
        :'configuration_type_metadata' => :'PropertyMetadata',
        :'path' => :'String',
        :'path_extended' => :'Array<PathExtendedElement>',
        :'path_extended_metadata' => :'PropertyMetadata',
        :'path_metadata' => :'PropertyMetadata',
        :'row' => :'String',
        :'row_metadata' => :'PropertyMetadata',
        :'write_back' => :'String',
        :'write_back_metadata' => :'PropertyMetadata'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'allowSenderToEdit')
        self.allow_sender_to_edit = attributes[:'allowSenderToEdit']
      end

      if attributes.has_key?(:'allowSenderToEditMetadata')
        self.allow_sender_to_edit_metadata = attributes[:'allowSenderToEditMetadata']
      end

      if attributes.has_key?(:'configurationType')
        self.configuration_type = attributes[:'configurationType']
      end

      if attributes.has_key?(:'configurationTypeMetadata')
        self.configuration_type_metadata = attributes[:'configurationTypeMetadata']
      end

      if attributes.has_key?(:'path')
        self.path = attributes[:'path']
      end

      if attributes.has_key?(:'pathExtended')
        if (value = attributes[:'pathExtended']).is_a?(Array)
          self.path_extended = value
        end
      end

      if attributes.has_key?(:'pathExtendedMetadata')
        self.path_extended_metadata = attributes[:'pathExtendedMetadata']
      end

      if attributes.has_key?(:'pathMetadata')
        self.path_metadata = attributes[:'pathMetadata']
      end

      if attributes.has_key?(:'row')
        self.row = attributes[:'row']
      end

      if attributes.has_key?(:'rowMetadata')
        self.row_metadata = attributes[:'rowMetadata']
      end

      if attributes.has_key?(:'writeBack')
        self.write_back = attributes[:'writeBack']
      end

      if attributes.has_key?(:'writeBackMetadata')
        self.write_back_metadata = attributes[:'writeBackMetadata']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          allow_sender_to_edit == o.allow_sender_to_edit &&
          allow_sender_to_edit_metadata == o.allow_sender_to_edit_metadata &&
          configuration_type == o.configuration_type &&
          configuration_type_metadata == o.configuration_type_metadata &&
          path == o.path &&
          path_extended == o.path_extended &&
          path_extended_metadata == o.path_extended_metadata &&
          path_metadata == o.path_metadata &&
          row == o.row &&
          row_metadata == o.row_metadata &&
          write_back == o.write_back &&
          write_back_metadata == o.write_back_metadata
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [allow_sender_to_edit, allow_sender_to_edit_metadata, configuration_type, configuration_type_metadata, path, path_extended, path_extended_metadata, path_metadata, row, row_metadata, write_back, write_back_metadata].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_eSign.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
