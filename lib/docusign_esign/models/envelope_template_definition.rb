=begin
#DocuSign REST API

#The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

OpenAPI spec version: v2
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13-SNAPSHOT

=end

require 'date'

module DocuSign_eSign
  # A complex element containing the following information:  templateId: Unique identifier of the template. If this is not provided, DocuSign will generate a value.   name: Name of the template. Maximum length: 100 characters.  shared: When set to **true**, the template is shared with the Everyone group in the account. If false, the template is only shared with the Administrator group.  password: Password, if the template is locked.  description: Description of the template. Maximum Length: 500 characters.  pageCount: Number of document pages in the template.  folderName: The name of the folder the template is located in.  folderId: The ID for the folder.  owner: The userName, email, userId, userType, and userStatus for the template owner.
  class EnvelopeTemplateDefinition
    # 
    attr_accessor :created

    # 
    attr_accessor :description

    # The ID for the folder.
    attr_accessor :folder_id

    #  The name of the folder in which the template is located.
    attr_accessor :folder_name

    # The URI of the folder.
    attr_accessor :folder_uri

    # 
    attr_accessor :last_modified

    attr_accessor :last_modified_by

    # 
    attr_accessor :name

    # 
    attr_accessor :new_password

    attr_accessor :owner

    # An integer value specifying the number of document pages in the template. Omit this property if not submitting a page count.
    attr_accessor :page_count

    # 
    attr_accessor :parent_folder_uri

    # 
    attr_accessor :password

    # When set to **true**, this custom tab is shared.
    attr_accessor :shared

    # The unique identifier of the template. If this is not provided, DocuSign will generate a value. 
    attr_accessor :template_id

    # 
    attr_accessor :uri

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'created' => :'created',
        :'description' => :'description',
        :'folder_id' => :'folderId',
        :'folder_name' => :'folderName',
        :'folder_uri' => :'folderUri',
        :'last_modified' => :'lastModified',
        :'last_modified_by' => :'lastModifiedBy',
        :'name' => :'name',
        :'new_password' => :'newPassword',
        :'owner' => :'owner',
        :'page_count' => :'pageCount',
        :'parent_folder_uri' => :'parentFolderUri',
        :'password' => :'password',
        :'shared' => :'shared',
        :'template_id' => :'templateId',
        :'uri' => :'uri'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'created' => :'String',
        :'description' => :'String',
        :'folder_id' => :'String',
        :'folder_name' => :'String',
        :'folder_uri' => :'String',
        :'last_modified' => :'String',
        :'last_modified_by' => :'UserInfo',
        :'name' => :'String',
        :'new_password' => :'String',
        :'owner' => :'UserInfo',
        :'page_count' => :'Integer',
        :'parent_folder_uri' => :'String',
        :'password' => :'String',
        :'shared' => :'String',
        :'template_id' => :'String',
        :'uri' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'folderId')
        self.folder_id = attributes[:'folderId']
      end

      if attributes.has_key?(:'folderName')
        self.folder_name = attributes[:'folderName']
      end

      if attributes.has_key?(:'folderUri')
        self.folder_uri = attributes[:'folderUri']
      end

      if attributes.has_key?(:'lastModified')
        self.last_modified = attributes[:'lastModified']
      end

      if attributes.has_key?(:'lastModifiedBy')
        self.last_modified_by = attributes[:'lastModifiedBy']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'newPassword')
        self.new_password = attributes[:'newPassword']
      end

      if attributes.has_key?(:'owner')
        self.owner = attributes[:'owner']
      end

      if attributes.has_key?(:'pageCount')
        self.page_count = attributes[:'pageCount']
      end

      if attributes.has_key?(:'parentFolderUri')
        self.parent_folder_uri = attributes[:'parentFolderUri']
      end

      if attributes.has_key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.has_key?(:'shared')
        self.shared = attributes[:'shared']
      end

      if attributes.has_key?(:'templateId')
        self.template_id = attributes[:'templateId']
      end

      if attributes.has_key?(:'uri')
        self.uri = attributes[:'uri']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created == o.created &&
          description == o.description &&
          folder_id == o.folder_id &&
          folder_name == o.folder_name &&
          folder_uri == o.folder_uri &&
          last_modified == o.last_modified &&
          last_modified_by == o.last_modified_by &&
          name == o.name &&
          new_password == o.new_password &&
          owner == o.owner &&
          page_count == o.page_count &&
          parent_folder_uri == o.parent_folder_uri &&
          password == o.password &&
          shared == o.shared &&
          template_id == o.template_id &&
          uri == o.uri
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [created, description, folder_id, folder_name, folder_uri, last_modified, last_modified_by, name, new_password, owner, page_count, parent_folder_uri, password, shared, template_id, uri].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_eSign.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
