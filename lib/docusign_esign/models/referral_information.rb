=begin
#DocuSign REST API

#The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

OpenAPI spec version: v2.1
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13-SNAPSHOT

=end

require 'date'

module DocuSign_eSign
  # A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry   ###### Note: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
  class ReferralInformation
    # A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry.  ###### Note: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.  
    attr_accessor :advertisement_id

    # When set to **true**, then customer support is provided as part of the account plan.
    attr_accessor :enable_support

    # 
    attr_accessor :external_org_id

    # 
    attr_accessor :group_member_id

    # 
    attr_accessor :id_type

    # The number of seats (users) included.
    attr_accessor :included_seats

    # 
    attr_accessor :industry

    # 
    attr_accessor :plan_start_month

    # 
    attr_accessor :promo_code

    # 
    attr_accessor :publisher_id

    # 
    attr_accessor :referral_code

    # 
    attr_accessor :referrer_name

    # Reserved for DocuSign use only.
    attr_accessor :sale_discount_amount

    # Reserved for DocuSign use only.
    attr_accessor :sale_discount_fixed_amount

    # Reserved for DocuSign use only.
    attr_accessor :sale_discount_percent

    # Reserved for DocuSign use only.
    attr_accessor :sale_discount_periods

    # Reserved for DocuSign use only.
    attr_accessor :sale_discount_seat_price_override

    # 
    attr_accessor :shopper_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'advertisement_id' => :'advertisementId',
        :'enable_support' => :'enableSupport',
        :'external_org_id' => :'externalOrgId',
        :'group_member_id' => :'groupMemberId',
        :'id_type' => :'idType',
        :'included_seats' => :'includedSeats',
        :'industry' => :'industry',
        :'plan_start_month' => :'planStartMonth',
        :'promo_code' => :'promoCode',
        :'publisher_id' => :'publisherId',
        :'referral_code' => :'referralCode',
        :'referrer_name' => :'referrerName',
        :'sale_discount_amount' => :'saleDiscountAmount',
        :'sale_discount_fixed_amount' => :'saleDiscountFixedAmount',
        :'sale_discount_percent' => :'saleDiscountPercent',
        :'sale_discount_periods' => :'saleDiscountPeriods',
        :'sale_discount_seat_price_override' => :'saleDiscountSeatPriceOverride',
        :'shopper_id' => :'shopperId'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'advertisement_id' => :'String',
        :'enable_support' => :'String',
        :'external_org_id' => :'String',
        :'group_member_id' => :'String',
        :'id_type' => :'String',
        :'included_seats' => :'String',
        :'industry' => :'String',
        :'plan_start_month' => :'String',
        :'promo_code' => :'String',
        :'publisher_id' => :'String',
        :'referral_code' => :'String',
        :'referrer_name' => :'String',
        :'sale_discount_amount' => :'String',
        :'sale_discount_fixed_amount' => :'String',
        :'sale_discount_percent' => :'String',
        :'sale_discount_periods' => :'String',
        :'sale_discount_seat_price_override' => :'String',
        :'shopper_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'advertisementId')
        self.advertisement_id = attributes[:'advertisementId']
      end

      if attributes.has_key?(:'enableSupport')
        self.enable_support = attributes[:'enableSupport']
      end

      if attributes.has_key?(:'externalOrgId')
        self.external_org_id = attributes[:'externalOrgId']
      end

      if attributes.has_key?(:'groupMemberId')
        self.group_member_id = attributes[:'groupMemberId']
      end

      if attributes.has_key?(:'idType')
        self.id_type = attributes[:'idType']
      end

      if attributes.has_key?(:'includedSeats')
        self.included_seats = attributes[:'includedSeats']
      end

      if attributes.has_key?(:'industry')
        self.industry = attributes[:'industry']
      end

      if attributes.has_key?(:'planStartMonth')
        self.plan_start_month = attributes[:'planStartMonth']
      end

      if attributes.has_key?(:'promoCode')
        self.promo_code = attributes[:'promoCode']
      end

      if attributes.has_key?(:'publisherId')
        self.publisher_id = attributes[:'publisherId']
      end

      if attributes.has_key?(:'referralCode')
        self.referral_code = attributes[:'referralCode']
      end

      if attributes.has_key?(:'referrerName')
        self.referrer_name = attributes[:'referrerName']
      end

      if attributes.has_key?(:'saleDiscountAmount')
        self.sale_discount_amount = attributes[:'saleDiscountAmount']
      end

      if attributes.has_key?(:'saleDiscountFixedAmount')
        self.sale_discount_fixed_amount = attributes[:'saleDiscountFixedAmount']
      end

      if attributes.has_key?(:'saleDiscountPercent')
        self.sale_discount_percent = attributes[:'saleDiscountPercent']
      end

      if attributes.has_key?(:'saleDiscountPeriods')
        self.sale_discount_periods = attributes[:'saleDiscountPeriods']
      end

      if attributes.has_key?(:'saleDiscountSeatPriceOverride')
        self.sale_discount_seat_price_override = attributes[:'saleDiscountSeatPriceOverride']
      end

      if attributes.has_key?(:'shopperId')
        self.shopper_id = attributes[:'shopperId']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          advertisement_id == o.advertisement_id &&
          enable_support == o.enable_support &&
          external_org_id == o.external_org_id &&
          group_member_id == o.group_member_id &&
          id_type == o.id_type &&
          included_seats == o.included_seats &&
          industry == o.industry &&
          plan_start_month == o.plan_start_month &&
          promo_code == o.promo_code &&
          publisher_id == o.publisher_id &&
          referral_code == o.referral_code &&
          referrer_name == o.referrer_name &&
          sale_discount_amount == o.sale_discount_amount &&
          sale_discount_fixed_amount == o.sale_discount_fixed_amount &&
          sale_discount_percent == o.sale_discount_percent &&
          sale_discount_periods == o.sale_discount_periods &&
          sale_discount_seat_price_override == o.sale_discount_seat_price_override &&
          shopper_id == o.shopper_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [advertisement_id, enable_support, external_org_id, group_member_id, id_type, included_seats, industry, plan_start_month, promo_code, publisher_id, referral_code, referrer_name, sale_discount_amount, sale_discount_fixed_amount, sale_discount_percent, sale_discount_periods, sale_discount_seat_price_override, shopper_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_eSign.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
