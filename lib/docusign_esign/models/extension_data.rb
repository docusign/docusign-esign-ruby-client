=begin
#Docusign eSignature REST API

#The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.

OpenAPI spec version: v2.1
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module DocuSign_eSign
  class ExtensionData
    # 
    attr_accessor :action_contract

    # 
    attr_accessor :action_input_key

    # 
    attr_accessor :action_name

    # 
    attr_accessor :application_id

    # 
    attr_accessor :application_name

    # 
    attr_accessor :connected_fields_data

    # 
    attr_accessor :connection_instances

    # 
    attr_accessor :extension_contract

    # 
    attr_accessor :extension_group_id

    # 
    attr_accessor :extension_name

    # 
    attr_accessor :extension_policy

    # 
    attr_accessor :publisher_name

    # 
    attr_accessor :required_for_extension

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'action_contract' => :'actionContract',
        :'action_input_key' => :'actionInputKey',
        :'action_name' => :'actionName',
        :'application_id' => :'applicationId',
        :'application_name' => :'applicationName',
        :'connected_fields_data' => :'connectedFieldsData',
        :'connection_instances' => :'connectionInstances',
        :'extension_contract' => :'extensionContract',
        :'extension_group_id' => :'extensionGroupId',
        :'extension_name' => :'extensionName',
        :'extension_policy' => :'extensionPolicy',
        :'publisher_name' => :'publisherName',
        :'required_for_extension' => :'requiredForExtension'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'action_contract' => :'String',
        :'action_input_key' => :'String',
        :'action_name' => :'String',
        :'application_id' => :'String',
        :'application_name' => :'String',
        :'connected_fields_data' => :'ConnectedData',
        :'connection_instances' => :'Array<ConnectionInstance>',
        :'extension_contract' => :'String',
        :'extension_group_id' => :'String',
        :'extension_name' => :'String',
        :'extension_policy' => :'String',
        :'publisher_name' => :'String',
        :'required_for_extension' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'actionContract')
        self.action_contract = attributes[:'actionContract']
      end

      if attributes.has_key?(:'actionInputKey')
        self.action_input_key = attributes[:'actionInputKey']
      end

      if attributes.has_key?(:'actionName')
        self.action_name = attributes[:'actionName']
      end

      if attributes.has_key?(:'applicationId')
        self.application_id = attributes[:'applicationId']
      end

      if attributes.has_key?(:'applicationName')
        self.application_name = attributes[:'applicationName']
      end

      if attributes.has_key?(:'connectedFieldsData')
        self.connected_fields_data = attributes[:'connectedFieldsData']
      end

      if attributes.has_key?(:'connectionInstances')
        if (value = attributes[:'connectionInstances']).is_a?(Array)
          self.connection_instances = value
        end
      end

      if attributes.has_key?(:'extensionContract')
        self.extension_contract = attributes[:'extensionContract']
      end

      if attributes.has_key?(:'extensionGroupId')
        self.extension_group_id = attributes[:'extensionGroupId']
      end

      if attributes.has_key?(:'extensionName')
        self.extension_name = attributes[:'extensionName']
      end

      if attributes.has_key?(:'extensionPolicy')
        self.extension_policy = attributes[:'extensionPolicy']
      end

      if attributes.has_key?(:'publisherName')
        self.publisher_name = attributes[:'publisherName']
      end

      if attributes.has_key?(:'requiredForExtension')
        self.required_for_extension = attributes[:'requiredForExtension']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          action_contract == o.action_contract &&
          action_input_key == o.action_input_key &&
          action_name == o.action_name &&
          application_id == o.application_id &&
          application_name == o.application_name &&
          connected_fields_data == o.connected_fields_data &&
          connection_instances == o.connection_instances &&
          extension_contract == o.extension_contract &&
          extension_group_id == o.extension_group_id &&
          extension_name == o.extension_name &&
          extension_policy == o.extension_policy &&
          publisher_name == o.publisher_name &&
          required_for_extension == o.required_for_extension
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [action_contract, action_input_key, action_name, application_id, application_name, connected_fields_data, connection_instances, extension_contract, extension_group_id, extension_name, extension_policy, publisher_name, required_for_extension].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_eSign.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
