=begin
#DocuSign REST API

#The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

OpenAPI spec version: v2.1
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module DocuSign_eSign

  class DisplayApplianceEnvelope
    # 
    attr_accessor :add_demo_stamp

    # 
    attr_accessor :allow_multiple_attachments

    # 
    attr_accessor :burn_default_tab_data

    # 
    attr_accessor :convert_pdf_fields

    # The envelope ID of the envelope status that failed to post.
    attr_accessor :envelope_id

    # 
    attr_accessor :envelope_type

    # 
    attr_accessor :include_sigs_before_complete

    # 
    attr_accessor :is_concat_mode

    # 
    attr_accessor :is_envelope_id_stamping_enabled

    # 
    attr_accessor :pdf_form_conversion_font_scale100

    # 
    attr_accessor :should_flatten

    # 
    attr_accessor :show_envelope_changes

    # 
    attr_accessor :sign_online

    # Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.
    attr_accessor :status

    # 
    attr_accessor :user_id


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'add_demo_stamp' => :'addDemoStamp',
        :'allow_multiple_attachments' => :'allowMultipleAttachments',
        :'burn_default_tab_data' => :'burnDefaultTabData',
        :'convert_pdf_fields' => :'convertPdfFields',
        :'envelope_id' => :'envelopeId',
        :'envelope_type' => :'envelopeType',
        :'include_sigs_before_complete' => :'includeSigsBeforeComplete',
        :'is_concat_mode' => :'isConcatMode',
        :'is_envelope_id_stamping_enabled' => :'isEnvelopeIDStampingEnabled',
        :'pdf_form_conversion_font_scale100' => :'pdfFormConversionFontScale100',
        :'should_flatten' => :'shouldFlatten',
        :'show_envelope_changes' => :'showEnvelopeChanges',
        :'sign_online' => :'signOnline',
        :'status' => :'status',
        :'user_id' => :'userId'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'add_demo_stamp' => :'BOOLEAN',
        :'allow_multiple_attachments' => :'BOOLEAN',
        :'burn_default_tab_data' => :'BOOLEAN',
        :'convert_pdf_fields' => :'BOOLEAN',
        :'envelope_id' => :'String',
        :'envelope_type' => :'String',
        :'include_sigs_before_complete' => :'BOOLEAN',
        :'is_concat_mode' => :'BOOLEAN',
        :'is_envelope_id_stamping_enabled' => :'BOOLEAN',
        :'pdf_form_conversion_font_scale100' => :'BOOLEAN',
        :'should_flatten' => :'BOOLEAN',
        :'show_envelope_changes' => :'BOOLEAN',
        :'sign_online' => :'BOOLEAN',
        :'status' => :'String',
        :'user_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'addDemoStamp')
        self.add_demo_stamp = attributes[:'addDemoStamp']
      end

      if attributes.has_key?(:'allowMultipleAttachments')
        self.allow_multiple_attachments = attributes[:'allowMultipleAttachments']
      end

      if attributes.has_key?(:'burnDefaultTabData')
        self.burn_default_tab_data = attributes[:'burnDefaultTabData']
      end

      if attributes.has_key?(:'convertPdfFields')
        self.convert_pdf_fields = attributes[:'convertPdfFields']
      end

      if attributes.has_key?(:'envelopeId')
        self.envelope_id = attributes[:'envelopeId']
      end

      if attributes.has_key?(:'envelopeType')
        self.envelope_type = attributes[:'envelopeType']
      end

      if attributes.has_key?(:'includeSigsBeforeComplete')
        self.include_sigs_before_complete = attributes[:'includeSigsBeforeComplete']
      end

      if attributes.has_key?(:'isConcatMode')
        self.is_concat_mode = attributes[:'isConcatMode']
      end

      if attributes.has_key?(:'isEnvelopeIDStampingEnabled')
        self.is_envelope_id_stamping_enabled = attributes[:'isEnvelopeIDStampingEnabled']
      end

      if attributes.has_key?(:'pdfFormConversionFontScale100')
        self.pdf_form_conversion_font_scale100 = attributes[:'pdfFormConversionFontScale100']
      end

      if attributes.has_key?(:'shouldFlatten')
        self.should_flatten = attributes[:'shouldFlatten']
      end

      if attributes.has_key?(:'showEnvelopeChanges')
        self.show_envelope_changes = attributes[:'showEnvelopeChanges']
      end

      if attributes.has_key?(:'signOnline')
        self.sign_online = attributes[:'signOnline']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'userId')
        self.user_id = attributes[:'userId']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          add_demo_stamp == o.add_demo_stamp &&
          allow_multiple_attachments == o.allow_multiple_attachments &&
          burn_default_tab_data == o.burn_default_tab_data &&
          convert_pdf_fields == o.convert_pdf_fields &&
          envelope_id == o.envelope_id &&
          envelope_type == o.envelope_type &&
          include_sigs_before_complete == o.include_sigs_before_complete &&
          is_concat_mode == o.is_concat_mode &&
          is_envelope_id_stamping_enabled == o.is_envelope_id_stamping_enabled &&
          pdf_form_conversion_font_scale100 == o.pdf_form_conversion_font_scale100 &&
          should_flatten == o.should_flatten &&
          show_envelope_changes == o.show_envelope_changes &&
          sign_online == o.sign_online &&
          status == o.status &&
          user_id == o.user_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [add_demo_stamp, allow_multiple_attachments, burn_default_tab_data, convert_pdf_fields, envelope_id, envelope_type, include_sigs_before_complete, is_concat_mode, is_envelope_id_stamping_enabled, pdf_form_conversion_font_scale100, should_flatten, show_envelope_changes, sign_online, status, user_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_eSign.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
