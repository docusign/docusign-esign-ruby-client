=begin
#DocuSign REST API

#The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

OpenAPI spec version: v2.1
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13-SNAPSHOT

=end

require 'date'

module DocuSign_eSign
  class ReportInProductListItem
    # 
    attr_accessor :get_uri

    # 
    attr_accessor :last_scheduled_execution_date

    # 
    attr_accessor :last_scheduled_execution_success_date

    # 
    attr_accessor :report_customized_id

    # 
    attr_accessor :report_description

    # 
    attr_accessor :report_id

    # 
    attr_accessor :report_name

    # 
    attr_accessor :report_type

    # 
    attr_accessor :run_uri

    # 
    attr_accessor :save_uri

    # 
    attr_accessor :schedule_create_date

    # 
    attr_accessor :schedule_end_date

    # 
    attr_accessor :schedule_id

    # 
    attr_accessor :schedule_renew_duration_days

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'get_uri' => :'getUri',
        :'last_scheduled_execution_date' => :'lastScheduledExecutionDate',
        :'last_scheduled_execution_success_date' => :'lastScheduledExecutionSuccessDate',
        :'report_customized_id' => :'reportCustomizedId',
        :'report_description' => :'reportDescription',
        :'report_id' => :'reportId',
        :'report_name' => :'reportName',
        :'report_type' => :'reportType',
        :'run_uri' => :'runUri',
        :'save_uri' => :'saveUri',
        :'schedule_create_date' => :'scheduleCreateDate',
        :'schedule_end_date' => :'scheduleEndDate',
        :'schedule_id' => :'scheduleId',
        :'schedule_renew_duration_days' => :'scheduleRenewDurationDays'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'get_uri' => :'String',
        :'last_scheduled_execution_date' => :'String',
        :'last_scheduled_execution_success_date' => :'String',
        :'report_customized_id' => :'String',
        :'report_description' => :'String',
        :'report_id' => :'String',
        :'report_name' => :'String',
        :'report_type' => :'String',
        :'run_uri' => :'String',
        :'save_uri' => :'String',
        :'schedule_create_date' => :'String',
        :'schedule_end_date' => :'String',
        :'schedule_id' => :'String',
        :'schedule_renew_duration_days' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'getUri')
        self.get_uri = attributes[:'getUri']
      end

      if attributes.has_key?(:'lastScheduledExecutionDate')
        self.last_scheduled_execution_date = attributes[:'lastScheduledExecutionDate']
      end

      if attributes.has_key?(:'lastScheduledExecutionSuccessDate')
        self.last_scheduled_execution_success_date = attributes[:'lastScheduledExecutionSuccessDate']
      end

      if attributes.has_key?(:'reportCustomizedId')
        self.report_customized_id = attributes[:'reportCustomizedId']
      end

      if attributes.has_key?(:'reportDescription')
        self.report_description = attributes[:'reportDescription']
      end

      if attributes.has_key?(:'reportId')
        self.report_id = attributes[:'reportId']
      end

      if attributes.has_key?(:'reportName')
        self.report_name = attributes[:'reportName']
      end

      if attributes.has_key?(:'reportType')
        self.report_type = attributes[:'reportType']
      end

      if attributes.has_key?(:'runUri')
        self.run_uri = attributes[:'runUri']
      end

      if attributes.has_key?(:'saveUri')
        self.save_uri = attributes[:'saveUri']
      end

      if attributes.has_key?(:'scheduleCreateDate')
        self.schedule_create_date = attributes[:'scheduleCreateDate']
      end

      if attributes.has_key?(:'scheduleEndDate')
        self.schedule_end_date = attributes[:'scheduleEndDate']
      end

      if attributes.has_key?(:'scheduleId')
        self.schedule_id = attributes[:'scheduleId']
      end

      if attributes.has_key?(:'scheduleRenewDurationDays')
        self.schedule_renew_duration_days = attributes[:'scheduleRenewDurationDays']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          get_uri == o.get_uri &&
          last_scheduled_execution_date == o.last_scheduled_execution_date &&
          last_scheduled_execution_success_date == o.last_scheduled_execution_success_date &&
          report_customized_id == o.report_customized_id &&
          report_description == o.report_description &&
          report_id == o.report_id &&
          report_name == o.report_name &&
          report_type == o.report_type &&
          run_uri == o.run_uri &&
          save_uri == o.save_uri &&
          schedule_create_date == o.schedule_create_date &&
          schedule_end_date == o.schedule_end_date &&
          schedule_id == o.schedule_id &&
          schedule_renew_duration_days == o.schedule_renew_duration_days
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [get_uri, last_scheduled_execution_date, last_scheduled_execution_success_date, report_customized_id, report_description, report_id, report_name, report_type, run_uri, save_uri, schedule_create_date, schedule_end_date, schedule_id, schedule_renew_duration_days].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_eSign.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
