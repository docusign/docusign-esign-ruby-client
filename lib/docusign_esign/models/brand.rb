=begin
#DocuSign REST API

#The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

OpenAPI spec version: v2.1
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13-SNAPSHOT

=end

require 'date'

module DocuSign_eSign
  class Brand
    # The name of the company associated with this brand.
    attr_accessor :brand_company

    # The ID used to identify a specific brand in API calls.
    attr_accessor :brand_id

    # 
    attr_accessor :brand_languages

    # The name of the brand.
    attr_accessor :brand_name

    # 
    attr_accessor :colors

    # 
    attr_accessor :default_brand_language

    # 
    attr_accessor :email_content

    attr_accessor :error_details

    # 
    attr_accessor :is_overriding_company_name

    # 
    attr_accessor :is_sending_default

    # 
    attr_accessor :is_signing_default

    # 
    attr_accessor :landing_pages

    # 
    attr_accessor :links

    attr_accessor :logos

    attr_accessor :resources

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'brand_company' => :'brandCompany',
        :'brand_id' => :'brandId',
        :'brand_languages' => :'brandLanguages',
        :'brand_name' => :'brandName',
        :'colors' => :'colors',
        :'default_brand_language' => :'defaultBrandLanguage',
        :'email_content' => :'emailContent',
        :'error_details' => :'errorDetails',
        :'is_overriding_company_name' => :'isOverridingCompanyName',
        :'is_sending_default' => :'isSendingDefault',
        :'is_signing_default' => :'isSigningDefault',
        :'landing_pages' => :'landingPages',
        :'links' => :'links',
        :'logos' => :'logos',
        :'resources' => :'resources'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'brand_company' => :'String',
        :'brand_id' => :'String',
        :'brand_languages' => :'Array<String>',
        :'brand_name' => :'String',
        :'colors' => :'Array<NameValue>',
        :'default_brand_language' => :'String',
        :'email_content' => :'Array<BrandEmailContent>',
        :'error_details' => :'ErrorDetails',
        :'is_overriding_company_name' => :'BOOLEAN',
        :'is_sending_default' => :'BOOLEAN',
        :'is_signing_default' => :'BOOLEAN',
        :'landing_pages' => :'Array<NameValue>',
        :'links' => :'Array<BrandLink>',
        :'logos' => :'BrandLogos',
        :'resources' => :'BrandResourceUrls'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'brandCompany')
        self.brand_company = attributes[:'brandCompany']
      end

      if attributes.has_key?(:'brandId')
        self.brand_id = attributes[:'brandId']
      end

      if attributes.has_key?(:'brandLanguages')
        if (value = attributes[:'brandLanguages']).is_a?(Array)
          self.brand_languages = value
        end
      end

      if attributes.has_key?(:'brandName')
        self.brand_name = attributes[:'brandName']
      end

      if attributes.has_key?(:'colors')
        if (value = attributes[:'colors']).is_a?(Array)
          self.colors = value
        end
      end

      if attributes.has_key?(:'defaultBrandLanguage')
        self.default_brand_language = attributes[:'defaultBrandLanguage']
      end

      if attributes.has_key?(:'emailContent')
        if (value = attributes[:'emailContent']).is_a?(Array)
          self.email_content = value
        end
      end

      if attributes.has_key?(:'errorDetails')
        self.error_details = attributes[:'errorDetails']
      end

      if attributes.has_key?(:'isOverridingCompanyName')
        self.is_overriding_company_name = attributes[:'isOverridingCompanyName']
      end

      if attributes.has_key?(:'isSendingDefault')
        self.is_sending_default = attributes[:'isSendingDefault']
      end

      if attributes.has_key?(:'isSigningDefault')
        self.is_signing_default = attributes[:'isSigningDefault']
      end

      if attributes.has_key?(:'landingPages')
        if (value = attributes[:'landingPages']).is_a?(Array)
          self.landing_pages = value
        end
      end

      if attributes.has_key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.has_key?(:'logos')
        self.logos = attributes[:'logos']
      end

      if attributes.has_key?(:'resources')
        self.resources = attributes[:'resources']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          brand_company == o.brand_company &&
          brand_id == o.brand_id &&
          brand_languages == o.brand_languages &&
          brand_name == o.brand_name &&
          colors == o.colors &&
          default_brand_language == o.default_brand_language &&
          email_content == o.email_content &&
          error_details == o.error_details &&
          is_overriding_company_name == o.is_overriding_company_name &&
          is_sending_default == o.is_sending_default &&
          is_signing_default == o.is_signing_default &&
          landing_pages == o.landing_pages &&
          links == o.links &&
          logos == o.logos &&
          resources == o.resources
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [brand_company, brand_id, brand_languages, brand_name, colors, default_brand_language, email_content, error_details, is_overriding_company_name, is_sending_default, is_signing_default, landing_pages, links, logos, resources].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_eSign.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
