=begin
#DocuSign REST API

#The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

OpenAPI spec version: v2.1
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module DocuSign_eSign

  class DisplayApplianceRecipient
    # 
    attr_accessor :cfr_part11

    # 
    attr_accessor :company

    # 
    attr_accessor :digital_signature_base64

    # 
    attr_accessor :email

    # 
    attr_accessor :full_name

    # 
    attr_accessor :initials_base64

    # 
    attr_accessor :in_person_email

    # 
    attr_accessor :is_notary

    # 
    attr_accessor :notary_seal_base64

    # 
    attr_accessor :phone_number

    # 
    attr_accessor :recipient_complete_count

    # 
    attr_accessor :recipient_guid_id

    # Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
    attr_accessor :recipient_id

    # 
    attr_accessor :recipient_status

    # 
    attr_accessor :recipient_type

    # 
    attr_accessor :row_state

    # 
    attr_accessor :signature_base64

    # 
    attr_accessor :signed

    # 
    attr_accessor :signer_apply_tabs

    # 
    attr_accessor :signer_attachment_base64

    # 
    attr_accessor :user_name


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cfr_part11' => :'cfrPart11',
        :'company' => :'company',
        :'digital_signature_base64' => :'digitalSignatureBase64',
        :'email' => :'email',
        :'full_name' => :'fullName',
        :'initials_base64' => :'initialsBase64',
        :'in_person_email' => :'inPersonEmail',
        :'is_notary' => :'isNotary',
        :'notary_seal_base64' => :'notarySealBase64',
        :'phone_number' => :'phoneNumber',
        :'recipient_complete_count' => :'recipientCompleteCount',
        :'recipient_guid_id' => :'recipientGuidId',
        :'recipient_id' => :'recipientId',
        :'recipient_status' => :'recipientStatus',
        :'recipient_type' => :'recipientType',
        :'row_state' => :'rowState',
        :'signature_base64' => :'signatureBase64',
        :'signed' => :'signed',
        :'signer_apply_tabs' => :'signerApplyTabs',
        :'signer_attachment_base64' => :'signerAttachmentBase64',
        :'user_name' => :'userName'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'cfr_part11' => :'BOOLEAN',
        :'company' => :'String',
        :'digital_signature_base64' => :'String',
        :'email' => :'String',
        :'full_name' => :'String',
        :'initials_base64' => :'String',
        :'in_person_email' => :'String',
        :'is_notary' => :'BOOLEAN',
        :'notary_seal_base64' => :'String',
        :'phone_number' => :'String',
        :'recipient_complete_count' => :'Integer',
        :'recipient_guid_id' => :'String',
        :'recipient_id' => :'String',
        :'recipient_status' => :'String',
        :'recipient_type' => :'String',
        :'row_state' => :'String',
        :'signature_base64' => :'String',
        :'signed' => :'BOOLEAN',
        :'signer_apply_tabs' => :'BOOLEAN',
        :'signer_attachment_base64' => :'String',
        :'user_name' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'cfrPart11')
        self.cfr_part11 = attributes[:'cfrPart11']
      end

      if attributes.has_key?(:'company')
        self.company = attributes[:'company']
      end

      if attributes.has_key?(:'digitalSignatureBase64')
        self.digital_signature_base64 = attributes[:'digitalSignatureBase64']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'fullName')
        self.full_name = attributes[:'fullName']
      end

      if attributes.has_key?(:'initialsBase64')
        self.initials_base64 = attributes[:'initialsBase64']
      end

      if attributes.has_key?(:'inPersonEmail')
        self.in_person_email = attributes[:'inPersonEmail']
      end

      if attributes.has_key?(:'isNotary')
        self.is_notary = attributes[:'isNotary']
      end

      if attributes.has_key?(:'notarySealBase64')
        self.notary_seal_base64 = attributes[:'notarySealBase64']
      end

      if attributes.has_key?(:'phoneNumber')
        self.phone_number = attributes[:'phoneNumber']
      end

      if attributes.has_key?(:'recipientCompleteCount')
        self.recipient_complete_count = attributes[:'recipientCompleteCount']
      end

      if attributes.has_key?(:'recipientGuidId')
        self.recipient_guid_id = attributes[:'recipientGuidId']
      end

      if attributes.has_key?(:'recipientId')
        self.recipient_id = attributes[:'recipientId']
      end

      if attributes.has_key?(:'recipientStatus')
        self.recipient_status = attributes[:'recipientStatus']
      end

      if attributes.has_key?(:'recipientType')
        self.recipient_type = attributes[:'recipientType']
      end

      if attributes.has_key?(:'rowState')
        self.row_state = attributes[:'rowState']
      end

      if attributes.has_key?(:'signatureBase64')
        self.signature_base64 = attributes[:'signatureBase64']
      end

      if attributes.has_key?(:'signed')
        self.signed = attributes[:'signed']
      end

      if attributes.has_key?(:'signerApplyTabs')
        self.signer_apply_tabs = attributes[:'signerApplyTabs']
      end

      if attributes.has_key?(:'signerAttachmentBase64')
        self.signer_attachment_base64 = attributes[:'signerAttachmentBase64']
      end

      if attributes.has_key?(:'userName')
        self.user_name = attributes[:'userName']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cfr_part11 == o.cfr_part11 &&
          company == o.company &&
          digital_signature_base64 == o.digital_signature_base64 &&
          email == o.email &&
          full_name == o.full_name &&
          initials_base64 == o.initials_base64 &&
          in_person_email == o.in_person_email &&
          is_notary == o.is_notary &&
          notary_seal_base64 == o.notary_seal_base64 &&
          phone_number == o.phone_number &&
          recipient_complete_count == o.recipient_complete_count &&
          recipient_guid_id == o.recipient_guid_id &&
          recipient_id == o.recipient_id &&
          recipient_status == o.recipient_status &&
          recipient_type == o.recipient_type &&
          row_state == o.row_state &&
          signature_base64 == o.signature_base64 &&
          signed == o.signed &&
          signer_apply_tabs == o.signer_apply_tabs &&
          signer_attachment_base64 == o.signer_attachment_base64 &&
          user_name == o.user_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [cfr_part11, company, digital_signature_base64, email, full_name, initials_base64, in_person_email, is_notary, notary_seal_base64, phone_number, recipient_complete_count, recipient_guid_id, recipient_id, recipient_status, recipient_type, row_state, signature_base64, signed, signer_apply_tabs, signer_attachment_base64, user_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_eSign.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
