=begin
#DocuSign REST API

#The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

OpenAPI spec version: v2.1
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13-SNAPSHOT

=end

require 'date'

module DocuSign_eSign
  # Contains information about a billing invoice.
  class BillingInvoice
    # Reserved: TBD
    attr_accessor :amount

    # Reserved: TBD
    attr_accessor :balance

    # Reserved: TBD
    attr_accessor :due_date

    # Reserved: TBD
    attr_accessor :invoice_id

    # Reserved: TBD
    attr_accessor :invoice_items

    # Reserved: TBD
    attr_accessor :invoice_number

    # Contains a URI for an endpoint that you can use to retrieve invoice information.
    attr_accessor :invoice_uri

    # 
    attr_accessor :non_taxable_amount

    # 
    attr_accessor :pdf_available

    # 
    attr_accessor :taxable_amount

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'amount' => :'amount',
        :'balance' => :'balance',
        :'due_date' => :'dueDate',
        :'invoice_id' => :'invoiceId',
        :'invoice_items' => :'invoiceItems',
        :'invoice_number' => :'invoiceNumber',
        :'invoice_uri' => :'invoiceUri',
        :'non_taxable_amount' => :'nonTaxableAmount',
        :'pdf_available' => :'pdfAvailable',
        :'taxable_amount' => :'taxableAmount'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'amount' => :'String',
        :'balance' => :'String',
        :'due_date' => :'String',
        :'invoice_id' => :'String',
        :'invoice_items' => :'Array<BillingInvoiceItem>',
        :'invoice_number' => :'String',
        :'invoice_uri' => :'String',
        :'non_taxable_amount' => :'String',
        :'pdf_available' => :'String',
        :'taxable_amount' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'balance')
        self.balance = attributes[:'balance']
      end

      if attributes.has_key?(:'dueDate')
        self.due_date = attributes[:'dueDate']
      end

      if attributes.has_key?(:'invoiceId')
        self.invoice_id = attributes[:'invoiceId']
      end

      if attributes.has_key?(:'invoiceItems')
        if (value = attributes[:'invoiceItems']).is_a?(Array)
          self.invoice_items = value
        end
      end

      if attributes.has_key?(:'invoiceNumber')
        self.invoice_number = attributes[:'invoiceNumber']
      end

      if attributes.has_key?(:'invoiceUri')
        self.invoice_uri = attributes[:'invoiceUri']
      end

      if attributes.has_key?(:'nonTaxableAmount')
        self.non_taxable_amount = attributes[:'nonTaxableAmount']
      end

      if attributes.has_key?(:'pdfAvailable')
        self.pdf_available = attributes[:'pdfAvailable']
      end

      if attributes.has_key?(:'taxableAmount')
        self.taxable_amount = attributes[:'taxableAmount']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          amount == o.amount &&
          balance == o.balance &&
          due_date == o.due_date &&
          invoice_id == o.invoice_id &&
          invoice_items == o.invoice_items &&
          invoice_number == o.invoice_number &&
          invoice_uri == o.invoice_uri &&
          non_taxable_amount == o.non_taxable_amount &&
          pdf_available == o.pdf_available &&
          taxable_amount == o.taxable_amount
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [amount, balance, due_date, invoice_id, invoice_items, invoice_number, invoice_uri, non_taxable_amount, pdf_available, taxable_amount].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_eSign.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
