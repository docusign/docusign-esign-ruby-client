=begin
#DocuSign REST API

#The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

OpenAPI spec version: v2.1
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module DocuSign_eSign

  class AccountPasswordRules
    # 
    attr_accessor :expire_password

    # 
    attr_accessor :expire_password_days

    attr_accessor :expire_password_days_metadata

    # 
    attr_accessor :lockout_duration_minutes

    attr_accessor :lockout_duration_minutes_metadata

    # 
    attr_accessor :lockout_duration_type

    attr_accessor :lockout_duration_type_metadata

    # 
    attr_accessor :minimum_password_age_days

    attr_accessor :minimum_password_age_days_metadata

    # 
    attr_accessor :minimum_password_length

    attr_accessor :minimum_password_length_metadata

    # 
    attr_accessor :password_include_digit

    # 
    attr_accessor :password_include_digit_or_special_character

    # 
    attr_accessor :password_include_lower_case

    # 
    attr_accessor :password_include_special_character

    # 
    attr_accessor :password_include_upper_case

    # 
    attr_accessor :password_strength_type

    attr_accessor :password_strength_type_metadata

    # 
    attr_accessor :questions_required

    attr_accessor :questions_required_metadata


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'expire_password' => :'expirePassword',
        :'expire_password_days' => :'expirePasswordDays',
        :'expire_password_days_metadata' => :'expirePasswordDaysMetadata',
        :'lockout_duration_minutes' => :'lockoutDurationMinutes',
        :'lockout_duration_minutes_metadata' => :'lockoutDurationMinutesMetadata',
        :'lockout_duration_type' => :'lockoutDurationType',
        :'lockout_duration_type_metadata' => :'lockoutDurationTypeMetadata',
        :'minimum_password_age_days' => :'minimumPasswordAgeDays',
        :'minimum_password_age_days_metadata' => :'minimumPasswordAgeDaysMetadata',
        :'minimum_password_length' => :'minimumPasswordLength',
        :'minimum_password_length_metadata' => :'minimumPasswordLengthMetadata',
        :'password_include_digit' => :'passwordIncludeDigit',
        :'password_include_digit_or_special_character' => :'passwordIncludeDigitOrSpecialCharacter',
        :'password_include_lower_case' => :'passwordIncludeLowerCase',
        :'password_include_special_character' => :'passwordIncludeSpecialCharacter',
        :'password_include_upper_case' => :'passwordIncludeUpperCase',
        :'password_strength_type' => :'passwordStrengthType',
        :'password_strength_type_metadata' => :'passwordStrengthTypeMetadata',
        :'questions_required' => :'questionsRequired',
        :'questions_required_metadata' => :'questionsRequiredMetadata'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'expire_password' => :'String',
        :'expire_password_days' => :'String',
        :'expire_password_days_metadata' => :'AccountPasswordExpirePasswordDays',
        :'lockout_duration_minutes' => :'String',
        :'lockout_duration_minutes_metadata' => :'AccountPasswordLockoutDurationMinutes',
        :'lockout_duration_type' => :'String',
        :'lockout_duration_type_metadata' => :'AccountPasswordLockoutDurationType',
        :'minimum_password_age_days' => :'String',
        :'minimum_password_age_days_metadata' => :'AccountPasswordMinimumPasswordAgeDays',
        :'minimum_password_length' => :'String',
        :'minimum_password_length_metadata' => :'AccountMinimumPasswordLength',
        :'password_include_digit' => :'String',
        :'password_include_digit_or_special_character' => :'String',
        :'password_include_lower_case' => :'String',
        :'password_include_special_character' => :'String',
        :'password_include_upper_case' => :'String',
        :'password_strength_type' => :'String',
        :'password_strength_type_metadata' => :'AccountPasswordStrengthType',
        :'questions_required' => :'String',
        :'questions_required_metadata' => :'AccountPasswordQuestionsRequired'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'expirePassword')
        self.expire_password = attributes[:'expirePassword']
      end

      if attributes.has_key?(:'expirePasswordDays')
        self.expire_password_days = attributes[:'expirePasswordDays']
      end

      if attributes.has_key?(:'expirePasswordDaysMetadata')
        self.expire_password_days_metadata = attributes[:'expirePasswordDaysMetadata']
      end

      if attributes.has_key?(:'lockoutDurationMinutes')
        self.lockout_duration_minutes = attributes[:'lockoutDurationMinutes']
      end

      if attributes.has_key?(:'lockoutDurationMinutesMetadata')
        self.lockout_duration_minutes_metadata = attributes[:'lockoutDurationMinutesMetadata']
      end

      if attributes.has_key?(:'lockoutDurationType')
        self.lockout_duration_type = attributes[:'lockoutDurationType']
      end

      if attributes.has_key?(:'lockoutDurationTypeMetadata')
        self.lockout_duration_type_metadata = attributes[:'lockoutDurationTypeMetadata']
      end

      if attributes.has_key?(:'minimumPasswordAgeDays')
        self.minimum_password_age_days = attributes[:'minimumPasswordAgeDays']
      end

      if attributes.has_key?(:'minimumPasswordAgeDaysMetadata')
        self.minimum_password_age_days_metadata = attributes[:'minimumPasswordAgeDaysMetadata']
      end

      if attributes.has_key?(:'minimumPasswordLength')
        self.minimum_password_length = attributes[:'minimumPasswordLength']
      end

      if attributes.has_key?(:'minimumPasswordLengthMetadata')
        self.minimum_password_length_metadata = attributes[:'minimumPasswordLengthMetadata']
      end

      if attributes.has_key?(:'passwordIncludeDigit')
        self.password_include_digit = attributes[:'passwordIncludeDigit']
      end

      if attributes.has_key?(:'passwordIncludeDigitOrSpecialCharacter')
        self.password_include_digit_or_special_character = attributes[:'passwordIncludeDigitOrSpecialCharacter']
      end

      if attributes.has_key?(:'passwordIncludeLowerCase')
        self.password_include_lower_case = attributes[:'passwordIncludeLowerCase']
      end

      if attributes.has_key?(:'passwordIncludeSpecialCharacter')
        self.password_include_special_character = attributes[:'passwordIncludeSpecialCharacter']
      end

      if attributes.has_key?(:'passwordIncludeUpperCase')
        self.password_include_upper_case = attributes[:'passwordIncludeUpperCase']
      end

      if attributes.has_key?(:'passwordStrengthType')
        self.password_strength_type = attributes[:'passwordStrengthType']
      end

      if attributes.has_key?(:'passwordStrengthTypeMetadata')
        self.password_strength_type_metadata = attributes[:'passwordStrengthTypeMetadata']
      end

      if attributes.has_key?(:'questionsRequired')
        self.questions_required = attributes[:'questionsRequired']
      end

      if attributes.has_key?(:'questionsRequiredMetadata')
        self.questions_required_metadata = attributes[:'questionsRequiredMetadata']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          expire_password == o.expire_password &&
          expire_password_days == o.expire_password_days &&
          expire_password_days_metadata == o.expire_password_days_metadata &&
          lockout_duration_minutes == o.lockout_duration_minutes &&
          lockout_duration_minutes_metadata == o.lockout_duration_minutes_metadata &&
          lockout_duration_type == o.lockout_duration_type &&
          lockout_duration_type_metadata == o.lockout_duration_type_metadata &&
          minimum_password_age_days == o.minimum_password_age_days &&
          minimum_password_age_days_metadata == o.minimum_password_age_days_metadata &&
          minimum_password_length == o.minimum_password_length &&
          minimum_password_length_metadata == o.minimum_password_length_metadata &&
          password_include_digit == o.password_include_digit &&
          password_include_digit_or_special_character == o.password_include_digit_or_special_character &&
          password_include_lower_case == o.password_include_lower_case &&
          password_include_special_character == o.password_include_special_character &&
          password_include_upper_case == o.password_include_upper_case &&
          password_strength_type == o.password_strength_type &&
          password_strength_type_metadata == o.password_strength_type_metadata &&
          questions_required == o.questions_required &&
          questions_required_metadata == o.questions_required_metadata
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [expire_password, expire_password_days, expire_password_days_metadata, lockout_duration_minutes, lockout_duration_minutes_metadata, lockout_duration_type, lockout_duration_type_metadata, minimum_password_age_days, minimum_password_age_days_metadata, minimum_password_length, minimum_password_length_metadata, password_include_digit, password_include_digit_or_special_character, password_include_lower_case, password_include_special_character, password_include_upper_case, password_strength_type, password_strength_type_metadata, questions_required, questions_required_metadata].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_eSign.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
