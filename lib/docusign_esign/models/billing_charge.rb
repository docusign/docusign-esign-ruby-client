=begin
#DocuSign REST API

#The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

OpenAPI spec version: v2.1
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module DocuSign_eSign
  # Contains information about a billing charge.
  class BillingCharge
    # Reserved: TBD
    attr_accessor :allowed_quantity

    # Reserved: TBD
    attr_accessor :blocked

    # Provides information on what services the charge item is for.  The following table provides a description of the different chargeName values available at this time.  | chargeName | Description | | --- | --- | | id_check | IDÃÂ Check Charge | | in_person_signing | In Person Signing charge | | envelopes Included | Sent Envelopes for the account | | age_verify | Age verification check | | ofac | OFAC Check | | id_confirm | ID confirmation check | | student_authentication | STAN PIN authentication check | | wet_sign_fax | Pages for returning signed documents by fax | | attachment_fax | Pages for returning attachments by fax | | phone_authentication | Phone authentication charge | | powerforms | PowerForm envelopes sent | | signer_payments | Payment processing charge | | outbound_fax | Send by fax charge | | bulk_recipient_envelopes | Bulk Recipient Envelopes sent | | sms_authentications | SMS authentication charge | | saml_authentications | SAML authentication charge | | express_signer_certificate | DocuSign Express Certificate charge | | personal_signer_certificate | Personal Signer Certificate charge | | safe_certificate | SAFE BioPharma Signer Certificate charge | | seats | Included active seats charge | | open_trust_certificate | OpenTrust Signer Certificate charge |
    attr_accessor :charge_name

    # Reserved: TBD
    attr_accessor :charge_type

    # Reserved: TBD
    attr_accessor :charge_unit_of_measure

    # 
    attr_accessor :discounts

    # 
    attr_accessor :first_effective_date

    # 
    attr_accessor :included_quantity

    # Reserved: TBD
    attr_accessor :incremental_quantity

    # 
    attr_accessor :last_effective_date

    # 
    attr_accessor :prices

    # Reserved: TBD
    attr_accessor :unit_price

    # 
    attr_accessor :used_quantity


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'allowed_quantity' => :'allowedQuantity',
        :'blocked' => :'blocked',
        :'charge_name' => :'chargeName',
        :'charge_type' => :'chargeType',
        :'charge_unit_of_measure' => :'chargeUnitOfMeasure',
        :'discounts' => :'discounts',
        :'first_effective_date' => :'firstEffectiveDate',
        :'included_quantity' => :'includedQuantity',
        :'incremental_quantity' => :'incrementalQuantity',
        :'last_effective_date' => :'lastEffectiveDate',
        :'prices' => :'prices',
        :'unit_price' => :'unitPrice',
        :'used_quantity' => :'usedQuantity'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'allowed_quantity' => :'String',
        :'blocked' => :'String',
        :'charge_name' => :'String',
        :'charge_type' => :'String',
        :'charge_unit_of_measure' => :'String',
        :'discounts' => :'Array<BillingDiscount>',
        :'first_effective_date' => :'String',
        :'included_quantity' => :'String',
        :'incremental_quantity' => :'String',
        :'last_effective_date' => :'String',
        :'prices' => :'Array<BillingPrice>',
        :'unit_price' => :'String',
        :'used_quantity' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'allowedQuantity')
        self.allowed_quantity = attributes[:'allowedQuantity']
      end

      if attributes.has_key?(:'blocked')
        self.blocked = attributes[:'blocked']
      end

      if attributes.has_key?(:'chargeName')
        self.charge_name = attributes[:'chargeName']
      end

      if attributes.has_key?(:'chargeType')
        self.charge_type = attributes[:'chargeType']
      end

      if attributes.has_key?(:'chargeUnitOfMeasure')
        self.charge_unit_of_measure = attributes[:'chargeUnitOfMeasure']
      end

      if attributes.has_key?(:'discounts')
        if (value = attributes[:'discounts']).is_a?(Array)
          self.discounts = value
        end
      end

      if attributes.has_key?(:'firstEffectiveDate')
        self.first_effective_date = attributes[:'firstEffectiveDate']
      end

      if attributes.has_key?(:'includedQuantity')
        self.included_quantity = attributes[:'includedQuantity']
      end

      if attributes.has_key?(:'incrementalQuantity')
        self.incremental_quantity = attributes[:'incrementalQuantity']
      end

      if attributes.has_key?(:'lastEffectiveDate')
        self.last_effective_date = attributes[:'lastEffectiveDate']
      end

      if attributes.has_key?(:'prices')
        if (value = attributes[:'prices']).is_a?(Array)
          self.prices = value
        end
      end

      if attributes.has_key?(:'unitPrice')
        self.unit_price = attributes[:'unitPrice']
      end

      if attributes.has_key?(:'usedQuantity')
        self.used_quantity = attributes[:'usedQuantity']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          allowed_quantity == o.allowed_quantity &&
          blocked == o.blocked &&
          charge_name == o.charge_name &&
          charge_type == o.charge_type &&
          charge_unit_of_measure == o.charge_unit_of_measure &&
          discounts == o.discounts &&
          first_effective_date == o.first_effective_date &&
          included_quantity == o.included_quantity &&
          incremental_quantity == o.incremental_quantity &&
          last_effective_date == o.last_effective_date &&
          prices == o.prices &&
          unit_price == o.unit_price &&
          used_quantity == o.used_quantity
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [allowed_quantity, blocked, charge_name, charge_type, charge_unit_of_measure, discounts, first_effective_date, included_quantity, incremental_quantity, last_effective_date, prices, unit_price, used_quantity].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_eSign.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
