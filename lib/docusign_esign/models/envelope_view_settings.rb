=begin
#Docusign eSignature REST API

#The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.

OpenAPI spec version: v2.1
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module DocuSign_eSign
  class EnvelopeViewSettings
    # 
    attr_accessor :back_button_action

    # 
    attr_accessor :document_settings

    # 
    attr_accessor :envelope_custom_field_settings

    # 
    attr_accessor :lock_token

    # 
    attr_accessor :recipient_settings

    # 
    attr_accessor :send_button_action

    # 
    attr_accessor :show_advanced_options

    # 
    attr_accessor :show_back_button

    # 
    attr_accessor :show_discard_action

    # 
    attr_accessor :show_header_actions

    # 
    attr_accessor :show_sign_now

    # 
    attr_accessor :starting_screen

    # 
    attr_accessor :tagger_settings

    # 
    attr_accessor :template_settings

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'back_button_action' => :'backButtonAction',
        :'document_settings' => :'documentSettings',
        :'envelope_custom_field_settings' => :'envelopeCustomFieldSettings',
        :'lock_token' => :'lockToken',
        :'recipient_settings' => :'recipientSettings',
        :'send_button_action' => :'sendButtonAction',
        :'show_advanced_options' => :'showAdvancedOptions',
        :'show_back_button' => :'showBackButton',
        :'show_discard_action' => :'showDiscardAction',
        :'show_header_actions' => :'showHeaderActions',
        :'show_sign_now' => :'showSignNow',
        :'starting_screen' => :'startingScreen',
        :'tagger_settings' => :'taggerSettings',
        :'template_settings' => :'templateSettings'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'back_button_action' => :'String',
        :'document_settings' => :'EnvelopeViewDocumentSettings',
        :'envelope_custom_field_settings' => :'EnvelopeViewEnvelopeCustomFieldSettings',
        :'lock_token' => :'String',
        :'recipient_settings' => :'EnvelopeViewRecipientSettings',
        :'send_button_action' => :'String',
        :'show_advanced_options' => :'String',
        :'show_back_button' => :'String',
        :'show_discard_action' => :'String',
        :'show_header_actions' => :'String',
        :'show_sign_now' => :'String',
        :'starting_screen' => :'String',
        :'tagger_settings' => :'EnvelopeViewTaggerSettings',
        :'template_settings' => :'EnvelopeViewTemplateSettings'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'backButtonAction')
        self.back_button_action = attributes[:'backButtonAction']
      end

      if attributes.has_key?(:'documentSettings')
        self.document_settings = attributes[:'documentSettings']
      end

      if attributes.has_key?(:'envelopeCustomFieldSettings')
        self.envelope_custom_field_settings = attributes[:'envelopeCustomFieldSettings']
      end

      if attributes.has_key?(:'lockToken')
        self.lock_token = attributes[:'lockToken']
      end

      if attributes.has_key?(:'recipientSettings')
        self.recipient_settings = attributes[:'recipientSettings']
      end

      if attributes.has_key?(:'sendButtonAction')
        self.send_button_action = attributes[:'sendButtonAction']
      end

      if attributes.has_key?(:'showAdvancedOptions')
        self.show_advanced_options = attributes[:'showAdvancedOptions']
      end

      if attributes.has_key?(:'showBackButton')
        self.show_back_button = attributes[:'showBackButton']
      end

      if attributes.has_key?(:'showDiscardAction')
        self.show_discard_action = attributes[:'showDiscardAction']
      end

      if attributes.has_key?(:'showHeaderActions')
        self.show_header_actions = attributes[:'showHeaderActions']
      end

      if attributes.has_key?(:'showSignNow')
        self.show_sign_now = attributes[:'showSignNow']
      end

      if attributes.has_key?(:'startingScreen')
        self.starting_screen = attributes[:'startingScreen']
      end

      if attributes.has_key?(:'taggerSettings')
        self.tagger_settings = attributes[:'taggerSettings']
      end

      if attributes.has_key?(:'templateSettings')
        self.template_settings = attributes[:'templateSettings']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          back_button_action == o.back_button_action &&
          document_settings == o.document_settings &&
          envelope_custom_field_settings == o.envelope_custom_field_settings &&
          lock_token == o.lock_token &&
          recipient_settings == o.recipient_settings &&
          send_button_action == o.send_button_action &&
          show_advanced_options == o.show_advanced_options &&
          show_back_button == o.show_back_button &&
          show_discard_action == o.show_discard_action &&
          show_header_actions == o.show_header_actions &&
          show_sign_now == o.show_sign_now &&
          starting_screen == o.starting_screen &&
          tagger_settings == o.tagger_settings &&
          template_settings == o.template_settings
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [back_button_action, document_settings, envelope_custom_field_settings, lock_token, recipient_settings, send_button_action, show_advanced_options, show_back_button, show_discard_action, show_header_actions, show_sign_now, starting_screen, tagger_settings, template_settings].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_eSign.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
