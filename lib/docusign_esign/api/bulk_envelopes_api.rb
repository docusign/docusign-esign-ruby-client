=begin
#DocuSign REST API

#The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

OpenAPI spec version: v2.1
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module DocuSign_eSign

  class GetBulkSendBatchEnvelopesOptions
    # 
    attr_accessor :count

    # 
    attr_accessor :include

    # 
    attr_accessor :order

    # 
    attr_accessor :order_by

    # 
    attr_accessor :search_text

    # 
    attr_accessor :start_position

    # 
    attr_accessor :status

    # 
    attr_accessor :user_id

    def self.default
      @@default ||= GetBulkSendBatchEnvelopesOptions.new
    end
  end

  class GetBulkSendBatchesOptions
    # 
    attr_accessor :batch_ids

    # 
    attr_accessor :count

    # 
    attr_accessor :search_text

    # 
    attr_accessor :start_position

    # 
    attr_accessor :status

    def self.default
      @@default ||= GetBulkSendBatchesOptions.new
    end
  end


  class BulkEnvelopesApi
    attr_accessor :api_client

    def initialize(api_client = BulkEnvelopesApi.default)
      @api_client = api_client
    end

    # Creates a new bulk send list
    # 
    # @param account_id The external account number (int) or account ID Guid.
    # @param bulk_sending_list  (optional parameter)
    # @return [BulkSendingList]
    def create_bulk_send_list(account_id, bulk_sending_list)
      data, _status_code, _headers = create_bulk_send_list_with_http_info(account_id,  bulk_sending_list)
      return data
    end

    # Creates a new bulk send list
    # 
    # @param account_id The external account number (int) or account ID Guid.
    # @param bulk_sending_list  (optional parameter)
    # @return [Array<(BulkSendingList, Fixnum, Hash)>] BulkSendingList data, response status code and response headers
    def create_bulk_send_list_with_http_info(account_id, bulk_sending_list)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BulkEnvelopesApi.create_bulk_send_list ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling BulkEnvelopesApi.create_bulk_send_list" if account_id.nil?
      # resource path
      local_var_path = "/v2.1/accounts/{accountId}/bulk_send_lists".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bulk_sending_list)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BulkSendingList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkEnvelopesApi#create_bulk_send_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Uses the specified bulk send list to send the envelope specified in the payload
    # 
    # @param account_id The external account number (int) or account ID Guid.
    # @param bulk_send_list_id 
    # @param bulk_send_request  (optional parameter)
    # @return [BulkSendResponse]
    def create_bulk_send_request(account_id, bulk_send_list_id, bulk_send_request)
      data, _status_code, _headers = create_bulk_send_request_with_http_info(account_id, bulk_send_list_id,  bulk_send_request)
      return data
    end

    # Uses the specified bulk send list to send the envelope specified in the payload
    # 
    # @param account_id The external account number (int) or account ID Guid.
    # @param bulk_send_list_id 
    # @param bulk_send_request  (optional parameter)
    # @return [Array<(BulkSendResponse, Fixnum, Hash)>] BulkSendResponse data, response status code and response headers
    def create_bulk_send_request_with_http_info(account_id, bulk_send_list_id, bulk_send_request)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BulkEnvelopesApi.create_bulk_send_request ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling BulkEnvelopesApi.create_bulk_send_request" if account_id.nil?
      # verify the required parameter 'bulk_send_list_id' is set
      fail ArgumentError, "Missing the required parameter 'bulk_send_list_id' when calling BulkEnvelopesApi.create_bulk_send_request" if bulk_send_list_id.nil?
      # resource path
      local_var_path = "/v2.1/accounts/{accountId}/bulk_send_lists/{bulkSendListId}/send".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'bulkSendListId' + '}', bulk_send_list_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bulk_send_request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BulkSendResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkEnvelopesApi#create_bulk_send_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Tests whether the specified bulk sending list can be used to send an envelope
    # 
    # @param account_id The external account number (int) or account ID Guid.
    # @param bulk_send_list_id 
    # @param bulk_send_request  (optional parameter)
    # @return [BulkSendTestResponse]
    def create_bulk_send_test_request(account_id, bulk_send_list_id, bulk_send_request)
      data, _status_code, _headers = create_bulk_send_test_request_with_http_info(account_id, bulk_send_list_id,  bulk_send_request)
      return data
    end

    # Tests whether the specified bulk sending list can be used to send an envelope
    # 
    # @param account_id The external account number (int) or account ID Guid.
    # @param bulk_send_list_id 
    # @param bulk_send_request  (optional parameter)
    # @return [Array<(BulkSendTestResponse, Fixnum, Hash)>] BulkSendTestResponse data, response status code and response headers
    def create_bulk_send_test_request_with_http_info(account_id, bulk_send_list_id, bulk_send_request)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BulkEnvelopesApi.create_bulk_send_test_request ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling BulkEnvelopesApi.create_bulk_send_test_request" if account_id.nil?
      # verify the required parameter 'bulk_send_list_id' is set
      fail ArgumentError, "Missing the required parameter 'bulk_send_list_id' when calling BulkEnvelopesApi.create_bulk_send_test_request" if bulk_send_list_id.nil?
      # resource path
      local_var_path = "/v2.1/accounts/{accountId}/bulk_send_lists/{bulkSendListId}/test".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'bulkSendListId' + '}', bulk_send_list_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bulk_send_request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BulkSendTestResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkEnvelopesApi#create_bulk_send_test_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes an existing bulk send list
    # 
    # @param account_id The external account number (int) or account ID Guid.
    # @param bulk_send_list_id 
    # @return [BulkSendingListSummaries]
    def delete_bulk_send_list(account_id, bulk_send_list_id)
      data, _status_code, _headers = delete_bulk_send_list_with_http_info(account_id, bulk_send_list_id)
      return data
    end

    # Deletes an existing bulk send list
    # 
    # @param account_id The external account number (int) or account ID Guid.
    # @param bulk_send_list_id 
    # @return [Array<(BulkSendingListSummaries, Fixnum, Hash)>] BulkSendingListSummaries data, response status code and response headers
    def delete_bulk_send_list_with_http_info(account_id, bulk_send_list_id)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BulkEnvelopesApi.delete_bulk_send_list ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling BulkEnvelopesApi.delete_bulk_send_list" if account_id.nil?
      # verify the required parameter 'bulk_send_list_id' is set
      fail ArgumentError, "Missing the required parameter 'bulk_send_list_id' when calling BulkEnvelopesApi.delete_bulk_send_list" if bulk_send_list_id.nil?
      # resource path
      local_var_path = "/v2.1/accounts/{accountId}/bulk_send_lists/{bulkSendListId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'bulkSendListId' + '}', bulk_send_list_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BulkSendingListSummaries')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkEnvelopesApi#delete_bulk_send_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets envelopes from a specific bulk send batch
    # 
    # @param account_id The external account number (int) or account ID Guid.
    # @param bulk_send_batch_id 
    # @param DocuSign_eSign::GetBulkSendBatchEnvelopesOptions Options for modifying the behavior of the function.
    # @return [EnvelopesInformation]
    def get_bulk_send_batch_envelopes(account_id, bulk_send_batch_id, options = DocuSign_eSign::GetBulkSendBatchEnvelopesOptions.default)
      data, _status_code, _headers = get_bulk_send_batch_envelopes_with_http_info(account_id, bulk_send_batch_id, options)
      return data
    end

    # Gets envelopes from a specific bulk send batch
    # 
    # @param account_id The external account number (int) or account ID Guid.
    # @param bulk_send_batch_id 
    # @param DocuSign_eSign::GetBulkSendBatchEnvelopesOptions Options for modifying the behavior of the function.
    # @return [Array<(EnvelopesInformation, Fixnum, Hash)>] EnvelopesInformation data, response status code and response headers
    def get_bulk_send_batch_envelopes_with_http_info(account_id, bulk_send_batch_id, options = DocuSign_eSign::GetBulkSendBatchEnvelopesOptions.default)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BulkEnvelopesApi.get_bulk_send_batch_envelopes ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling BulkEnvelopesApi.get_bulk_send_batch_envelopes" if account_id.nil?
      # verify the required parameter 'bulk_send_batch_id' is set
      fail ArgumentError, "Missing the required parameter 'bulk_send_batch_id' when calling BulkEnvelopesApi.get_bulk_send_batch_envelopes" if bulk_send_batch_id.nil?
      # resource path
      local_var_path = "/v2.1/accounts/{accountId}/bulk_send_batch/{bulkSendBatchId}/envelopes".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'bulkSendBatchId' + '}', bulk_send_batch_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = options.count if !options.count.nil?
      query_params[:'include'] = options.include if !options.include.nil?
      query_params[:'order'] = options.order if !options.order.nil?
      query_params[:'order_by'] = options.order_by if !options.order_by.nil?
      query_params[:'search_text'] = options.search_text if !options.search_text.nil?
      query_params[:'start_position'] = options.start_position if !options.start_position.nil?
      query_params[:'status'] = options.status if !options.status.nil?
      query_params[:'user_id'] = options.user_id if !options.user_id.nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnvelopesInformation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkEnvelopesApi#get_bulk_send_batch_envelopes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a specific bulk send batch status
    # 
    # @param account_id The external account number (int) or account ID Guid.
    # @param bulk_send_batch_id 
    # @return [BulkSendBatchStatus]
    def get_bulk_send_batch_status(account_id, bulk_send_batch_id)
      data, _status_code, _headers = get_bulk_send_batch_status_with_http_info(account_id, bulk_send_batch_id)
      return data
    end

    # Gets a specific bulk send batch status
    # 
    # @param account_id The external account number (int) or account ID Guid.
    # @param bulk_send_batch_id 
    # @return [Array<(BulkSendBatchStatus, Fixnum, Hash)>] BulkSendBatchStatus data, response status code and response headers
    def get_bulk_send_batch_status_with_http_info(account_id, bulk_send_batch_id)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BulkEnvelopesApi.get_bulk_send_batch_status ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling BulkEnvelopesApi.get_bulk_send_batch_status" if account_id.nil?
      # verify the required parameter 'bulk_send_batch_id' is set
      fail ArgumentError, "Missing the required parameter 'bulk_send_batch_id' when calling BulkEnvelopesApi.get_bulk_send_batch_status" if bulk_send_batch_id.nil?
      # resource path
      local_var_path = "/v2.1/accounts/{accountId}/bulk_send_batch/{bulkSendBatchId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'bulkSendBatchId' + '}', bulk_send_batch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BulkSendBatchStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkEnvelopesApi#get_bulk_send_batch_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of bulk send batch satuses initiated by account.
    # 
    # @param account_id The external account number (int) or account ID Guid.
    # @param DocuSign_eSign::GetBulkSendBatchesOptions Options for modifying the behavior of the function.
    # @return [BulkSendBatchSummaries]
    def get_bulk_send_batches(account_id, options = DocuSign_eSign::GetBulkSendBatchesOptions.default)
      data, _status_code, _headers = get_bulk_send_batches_with_http_info(account_id, options)
      return data
    end

    # Returns a list of bulk send batch satuses initiated by account.
    # 
    # @param account_id The external account number (int) or account ID Guid.
    # @param DocuSign_eSign::GetBulkSendBatchesOptions Options for modifying the behavior of the function.
    # @return [Array<(BulkSendBatchSummaries, Fixnum, Hash)>] BulkSendBatchSummaries data, response status code and response headers
    def get_bulk_send_batches_with_http_info(account_id, options = DocuSign_eSign::GetBulkSendBatchesOptions.default)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BulkEnvelopesApi.get_bulk_send_batches ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling BulkEnvelopesApi.get_bulk_send_batches" if account_id.nil?
      # resource path
      local_var_path = "/v2.1/accounts/{accountId}/bulk_send_batch".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'batch_ids'] = options.batch_ids if !options.batch_ids.nil?
      query_params[:'count'] = options.count if !options.count.nil?
      query_params[:'search_text'] = options.search_text if !options.search_text.nil?
      query_params[:'start_position'] = options.start_position if !options.start_position.nil?
      query_params[:'status'] = options.status if !options.status.nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BulkSendBatchSummaries')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkEnvelopesApi#get_bulk_send_batches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a specific bulk send list
    # 
    # @param account_id The external account number (int) or account ID Guid.
    # @param bulk_send_list_id 
    # @return [BulkSendingList]
    def get_bulk_send_list(account_id, bulk_send_list_id)
      data, _status_code, _headers = get_bulk_send_list_with_http_info(account_id, bulk_send_list_id)
      return data
    end

    # Gets a specific bulk send list
    # 
    # @param account_id The external account number (int) or account ID Guid.
    # @param bulk_send_list_id 
    # @return [Array<(BulkSendingList, Fixnum, Hash)>] BulkSendingList data, response status code and response headers
    def get_bulk_send_list_with_http_info(account_id, bulk_send_list_id)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BulkEnvelopesApi.get_bulk_send_list ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling BulkEnvelopesApi.get_bulk_send_list" if account_id.nil?
      # verify the required parameter 'bulk_send_list_id' is set
      fail ArgumentError, "Missing the required parameter 'bulk_send_list_id' when calling BulkEnvelopesApi.get_bulk_send_list" if bulk_send_list_id.nil?
      # resource path
      local_var_path = "/v2.1/accounts/{accountId}/bulk_send_lists/{bulkSendListId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'bulkSendListId' + '}', bulk_send_list_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BulkSendingList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkEnvelopesApi#get_bulk_send_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists top-level details for all bulk send lists visible to the current user
    # 
    # @param account_id The external account number (int) or account ID Guid.
    # @return [BulkSendingListSummaries]
    def get_bulk_send_lists(account_id)
      data, _status_code, _headers = get_bulk_send_lists_with_http_info(account_id)
      return data
    end

    # Lists top-level details for all bulk send lists visible to the current user
    # 
    # @param account_id The external account number (int) or account ID Guid.
    # @return [Array<(BulkSendingListSummaries, Fixnum, Hash)>] BulkSendingListSummaries data, response status code and response headers
    def get_bulk_send_lists_with_http_info(account_id)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BulkEnvelopesApi.get_bulk_send_lists ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling BulkEnvelopesApi.get_bulk_send_lists" if account_id.nil?
      # resource path
      local_var_path = "/v2.1/accounts/{accountId}/bulk_send_lists".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BulkSendingListSummaries')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkEnvelopesApi#get_bulk_send_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Put/Update a specific bulk send batch status
    # 
    # @param account_id The external account number (int) or account ID Guid.
    # @param bulk_send_batch_id 
    # @param bulk_send_batch_request  (optional parameter)
    # @return [BulkSendBatchStatus]
    def update_bulk_send_batch_status(account_id, bulk_send_batch_id, bulk_send_batch_request)
      data, _status_code, _headers = update_bulk_send_batch_status_with_http_info(account_id, bulk_send_batch_id,  bulk_send_batch_request)
      return data
    end

    # Put/Update a specific bulk send batch status
    # 
    # @param account_id The external account number (int) or account ID Guid.
    # @param bulk_send_batch_id 
    # @param bulk_send_batch_request  (optional parameter)
    # @return [Array<(BulkSendBatchStatus, Fixnum, Hash)>] BulkSendBatchStatus data, response status code and response headers
    def update_bulk_send_batch_status_with_http_info(account_id, bulk_send_batch_id, bulk_send_batch_request)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BulkEnvelopesApi.update_bulk_send_batch_status ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling BulkEnvelopesApi.update_bulk_send_batch_status" if account_id.nil?
      # verify the required parameter 'bulk_send_batch_id' is set
      fail ArgumentError, "Missing the required parameter 'bulk_send_batch_id' when calling BulkEnvelopesApi.update_bulk_send_batch_status" if bulk_send_batch_id.nil?
      # resource path
      local_var_path = "/v2.1/accounts/{accountId}/bulk_send_batch/{bulkSendBatchId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'bulkSendBatchId' + '}', bulk_send_batch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bulk_send_batch_request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BulkSendBatchStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkEnvelopesApi#update_bulk_send_batch_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates an existing bulk send list.  If send_envelope query string value is provided, will accept an empty payload and try to send the specified envelope
    # 
    # @param account_id The external account number (int) or account ID Guid.
    # @param bulk_send_list_id 
    # @param bulk_sending_list  (optional parameter)
    # @return [BulkSendingList]
    def update_bulk_send_list(account_id, bulk_send_list_id, bulk_sending_list)
      data, _status_code, _headers = update_bulk_send_list_with_http_info(account_id, bulk_send_list_id,  bulk_sending_list)
      return data
    end

    # Updates an existing bulk send list.  If send_envelope query string value is provided, will accept an empty payload and try to send the specified envelope
    # 
    # @param account_id The external account number (int) or account ID Guid.
    # @param bulk_send_list_id 
    # @param bulk_sending_list  (optional parameter)
    # @return [Array<(BulkSendingList, Fixnum, Hash)>] BulkSendingList data, response status code and response headers
    def update_bulk_send_list_with_http_info(account_id, bulk_send_list_id, bulk_sending_list)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BulkEnvelopesApi.update_bulk_send_list ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling BulkEnvelopesApi.update_bulk_send_list" if account_id.nil?
      # verify the required parameter 'bulk_send_list_id' is set
      fail ArgumentError, "Missing the required parameter 'bulk_send_list_id' when calling BulkEnvelopesApi.update_bulk_send_list" if bulk_send_list_id.nil?
      # resource path
      local_var_path = "/v2.1/accounts/{accountId}/bulk_send_lists/{bulkSendListId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'bulkSendListId' + '}', bulk_send_list_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bulk_sending_list)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BulkSendingList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkEnvelopesApi#update_bulk_send_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end